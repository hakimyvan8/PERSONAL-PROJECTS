{"version":3,"sources":["..\\node_modules\\process\\browser.js","..\\node_modules\\qunitjs\\qunit\\qunit.js","..\\index.js","tree.specs.js"],"names":["process","module","exports","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","Error","defaultClearTimeout","setTimeout","e","clearTimeout","runTimeout","fun","call","runClearTimeout","marker","queue","draining","currentQueue","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","nextTick","args","Array","arguments","i","push","Item","array","prototype","apply","title","browser","env","argv","version","versions","noop","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","visitTree","breadthFirstTraverseTree","preorderTraverseTree","postOrderTraverseTree","reduceTree","forEachInTree","mapOverTree","pruneWhen","getHashedTreeLenses","mapOverHashTree","mapOverObj","traverseObj","switchTreeDataStructure","PATH_ROOT","POST_ORDER","PRE_ORDER","BFS","SEP","clone","a","undefined","JSON","parse","stringify","merge","objA","objB","Object","assign","times","fn","n","map","Number","path","join","updatePathInTraversalState","traversalState","subTree","subTreeChildren","forEach","subTreeChild","index","traversalStateParent","get","traversalStateChild","currentChildPath","set","isAdded","isVisited","updateVisitInTraversalState","tree","traversalSpecs","store","lenses","traverse","emptyOrEmptyConstructor","empty","add","takeAndRemoveOne","isEmpty","getChildren","visit","seedOrSeedConstructor","seed","Map","currentStore","visitAcc","clear","shift","subTrees","unshift","isLeaf","predicate","decoratedLenses","result","strategy","strategies","action","treeTraveerse","accumulator","mapFn","constructTree","getLabel","getChildrenNumber","treeTraverse","pathMap","mappedLabel","mappedChildren","mappedTree","pruneLenses","prunedTree","x","sep","makeChildCursor","parentCursor","childIndex","cursor","hash","label","children","value","reduce","acc","child","obj","isLeafLabel","objectTreeLenses","isArray","keys","values","prop","labelKey","mapKeyfn","key","mapValuefn","leafValue","rootKey","rootKeyMap","mapped","isEmptyObject","root","treeObj","traverseFn","decoratedTraverse","visitAllButRoot","traversedTreeObj","constructor","arrayTreeLenses","originLenses","targetLenses","newTreeStruct","QUnit","addPrefix","prefix","str","dump","maxDepth","test","exec_test","assert","actual","expected","deepEqual","reduceTraverse","traces","trees","traverseHashedTree","hash_orig","parentLabel","graphNodes","data","id","parent","arrayTree"],"mappings":"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","file":"tree.specs.03c7cff0.map","sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*!\n * QUnit 1.23.1\n * https://qunitjs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2016-04-12T17:29Z\n */\n\n( function( global ) {\n\nvar QUnit = {};\n\nvar Date = global.Date;\nvar now = Date.now || function() {\n\treturn new Date().getTime();\n};\n\nvar setTimeout = global.setTimeout;\nvar clearTimeout = global.clearTimeout;\n\n// Store a local window from the global to allow direct references.\nvar window = global.window;\n\nvar defined = {\n\tdocument: window && window.document !== undefined,\n\tsetTimeout: setTimeout !== undefined,\n\tsessionStorage: ( function() {\n\t\tvar x = \"qunit-test-string\";\n\t\ttry {\n\t\t\tsessionStorage.setItem( x, x );\n\t\t\tsessionStorage.removeItem( x );\n\t\t\treturn true;\n\t\t} catch ( e ) {\n\t\t\treturn false;\n\t\t}\n\t}() )\n};\n\nvar fileName = ( sourceFromStacktrace( 0 ) || \"\" ).replace( /(:\\d+)+\\)?/, \"\" ).replace( /.+\\//, \"\" );\nvar globalStartCalled = false;\nvar runStarted = false;\n\nvar toString = Object.prototype.toString,\n\thasOwn = Object.prototype.hasOwnProperty;\n\n// Returns a new Array with the elements that are in a but not in b\nfunction diff( a, b ) {\n\tvar i, j,\n\t\tresult = a.slice();\n\n\tfor ( i = 0; i < result.length; i++ ) {\n\t\tfor ( j = 0; j < b.length; j++ ) {\n\t\t\tif ( result[ i ] === b[ j ] ) {\n\t\t\t\tresult.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n// From jquery.js\nfunction inArray( elem, array ) {\n\tif ( array.indexOf ) {\n\t\treturn array.indexOf( elem );\n\t}\n\n\tfor ( var i = 0, length = array.length; i < length; i++ ) {\n\t\tif ( array[ i ] === elem ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n/**\n * Makes a clone of an object using only Array or Object as base,\n * and copies over the own enumerable properties.\n *\n * @param {Object} obj\n * @return {Object} New object with only the own properties (recursively).\n */\nfunction objectValues ( obj ) {\n\tvar key, val,\n\t\tvals = QUnit.is( \"array\", obj ) ? [] : {};\n\tfor ( key in obj ) {\n\t\tif ( hasOwn.call( obj, key ) ) {\n\t\t\tval = obj[ key ];\n\t\t\tvals[ key ] = val === Object( val ) ? objectValues( val ) : val;\n\t\t}\n\t}\n\treturn vals;\n}\n\nfunction extend( a, b, undefOnly ) {\n\tfor ( var prop in b ) {\n\t\tif ( hasOwn.call( b, prop ) ) {\n\n\t\t\t// Avoid \"Member not found\" error in IE8 caused by messing with window.constructor\n\t\t\t// This block runs on every environment, so `global` is being used instead of `window`\n\t\t\t// to avoid errors on node.\n\t\t\tif ( prop !== \"constructor\" || a !== global ) {\n\t\t\t\tif ( b[ prop ] === undefined ) {\n\t\t\t\t\tdelete a[ prop ];\n\t\t\t\t} else if ( !( undefOnly && typeof a[ prop ] !== \"undefined\" ) ) {\n\t\t\t\t\ta[ prop ] = b[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a;\n}\n\nfunction objectType( obj ) {\n\tif ( typeof obj === \"undefined\" ) {\n\t\treturn \"undefined\";\n\t}\n\n\t// Consider: typeof null === object\n\tif ( obj === null ) {\n\t\treturn \"null\";\n\t}\n\n\tvar match = toString.call( obj ).match( /^\\[object\\s(.*)\\]$/ ),\n\t\ttype = match && match[ 1 ];\n\n\tswitch ( type ) {\n\t\tcase \"Number\":\n\t\t\tif ( isNaN( obj ) ) {\n\t\t\t\treturn \"nan\";\n\t\t\t}\n\t\t\treturn \"number\";\n\t\tcase \"String\":\n\t\tcase \"Boolean\":\n\t\tcase \"Array\":\n\t\tcase \"Set\":\n\t\tcase \"Map\":\n\t\tcase \"Date\":\n\t\tcase \"RegExp\":\n\t\tcase \"Function\":\n\t\tcase \"Symbol\":\n\t\t\treturn type.toLowerCase();\n\t}\n\tif ( typeof obj === \"object\" ) {\n\t\treturn \"object\";\n\t}\n}\n\n// Safe object type checking\nfunction is( type, obj ) {\n\treturn QUnit.objectType( obj ) === type;\n}\n\n// Doesn't support IE6 to IE9, it will return undefined on these browsers\n// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack\nfunction extractStacktrace( e, offset ) {\n\toffset = offset === undefined ? 4 : offset;\n\n\tvar stack, include, i;\n\n\tif ( e.stack ) {\n\t\tstack = e.stack.split( \"\\n\" );\n\t\tif ( /^error$/i.test( stack[ 0 ] ) ) {\n\t\t\tstack.shift();\n\t\t}\n\t\tif ( fileName ) {\n\t\t\tinclude = [];\n\t\t\tfor ( i = offset; i < stack.length; i++ ) {\n\t\t\t\tif ( stack[ i ].indexOf( fileName ) !== -1 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tinclude.push( stack[ i ] );\n\t\t\t}\n\t\t\tif ( include.length ) {\n\t\t\t\treturn include.join( \"\\n\" );\n\t\t\t}\n\t\t}\n\t\treturn stack[ offset ];\n\n\t// Support: Safari <=6 only\n\t} else if ( e.sourceURL ) {\n\n\t\t// Exclude useless self-reference for generated Error objects\n\t\tif ( /qunit.js$/.test( e.sourceURL ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// For actual exceptions, this is useful\n\t\treturn e.sourceURL + \":\" + e.line;\n\t}\n}\n\nfunction sourceFromStacktrace( offset ) {\n\tvar error = new Error();\n\n\t// Support: Safari <=7 only, IE <=10 - 11 only\n\t// Not all browsers generate the `stack` property for `new Error()`, see also #636\n\tif ( !error.stack ) {\n\t\ttry {\n\t\t\tthrow error;\n\t\t} catch ( err ) {\n\t\t\terror = err;\n\t\t}\n\t}\n\n\treturn extractStacktrace( error, offset );\n}\n\n/**\n * Config object: Maintain internal state\n * Later exposed as QUnit.config\n * `config` initialized at top of scope\n */\nvar config = {\n\n\t// The queue of tests to run\n\tqueue: [],\n\n\t// Block until document ready\n\tblocking: true,\n\n\t// By default, run previously failed tests first\n\t// very useful in combination with \"Hide passed tests\" checked\n\treorder: true,\n\n\t// By default, modify document.title when suite is done\n\taltertitle: true,\n\n\t// HTML Reporter: collapse every test except the first failing test\n\t// If false, all failing tests will be expanded\n\tcollapse: true,\n\n\t// By default, scroll to top of the page when suite is done\n\tscrolltop: true,\n\n\t// Depth up-to which object will be dumped\n\tmaxDepth: 5,\n\n\t// When enabled, all tests must call expect()\n\trequireExpects: false,\n\n\t// Placeholder for user-configurable form-exposed URL parameters\n\turlConfig: [],\n\n\t// Set of all modules.\n\tmodules: [],\n\n\t// Stack of nested modules\n\tmoduleStack: [],\n\n\t// The first unnamed module\n\tcurrentModule: {\n\t\tname: \"\",\n\t\ttests: []\n\t},\n\n\tcallbacks: {}\n};\n\n// Push a loose unnamed module to the modules collection\nconfig.modules.push( config.currentModule );\n\nvar loggingCallbacks = {};\n\n// Register logging callbacks\nfunction registerLoggingCallbacks( obj ) {\n\tvar i, l, key,\n\t\tcallbackNames = [ \"begin\", \"done\", \"log\", \"testStart\", \"testDone\",\n\t\t\t\"moduleStart\", \"moduleDone\" ];\n\n\tfunction registerLoggingCallback( key ) {\n\t\tvar loggingCallback = function( callback ) {\n\t\t\tif ( objectType( callback ) !== \"function\" ) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"QUnit logging methods require a callback function as their first parameters.\"\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconfig.callbacks[ key ].push( callback );\n\t\t};\n\n\t\t// DEPRECATED: This will be removed on QUnit 2.0.0+\n\t\t// Stores the registered functions allowing restoring\n\t\t// at verifyLoggingCallbacks() if modified\n\t\tloggingCallbacks[ key ] = loggingCallback;\n\n\t\treturn loggingCallback;\n\t}\n\n\tfor ( i = 0, l = callbackNames.length; i < l; i++ ) {\n\t\tkey = callbackNames[ i ];\n\n\t\t// Initialize key collection of logging callback\n\t\tif ( objectType( config.callbacks[ key ] ) === \"undefined\" ) {\n\t\t\tconfig.callbacks[ key ] = [];\n\t\t}\n\n\t\tobj[ key ] = registerLoggingCallback( key );\n\t}\n}\n\nfunction runLoggingCallbacks( key, args ) {\n\tvar i, l, callbacks;\n\n\tcallbacks = config.callbacks[ key ];\n\tfor ( i = 0, l = callbacks.length; i < l; i++ ) {\n\t\tcallbacks[ i ]( args );\n\t}\n}\n\n// DEPRECATED: This will be removed on 2.0.0+\n// This function verifies if the loggingCallbacks were modified by the user\n// If so, it will restore it, assign the given callback and print a console warning\nfunction verifyLoggingCallbacks() {\n\tvar loggingCallback, userCallback;\n\n\tfor ( loggingCallback in loggingCallbacks ) {\n\t\tif ( QUnit[ loggingCallback ] !== loggingCallbacks[ loggingCallback ] ) {\n\n\t\t\tuserCallback = QUnit[ loggingCallback ];\n\n\t\t\t// Restore the callback function\n\t\t\tQUnit[ loggingCallback ] = loggingCallbacks[ loggingCallback ];\n\n\t\t\t// Assign the deprecated given callback\n\t\t\tQUnit[ loggingCallback ]( userCallback );\n\n\t\t\tif ( global.console && global.console.warn ) {\n\t\t\t\tglobal.console.warn(\n\t\t\t\t\t\"QUnit.\" + loggingCallback + \" was replaced with a new value.\\n\" +\n\t\t\t\t\t\"Please, check out the documentation on how to apply logging callbacks.\\n\" +\n\t\t\t\t\t\"Reference: https://api.qunitjs.com/category/callbacks/\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\n( function() {\n\tif ( !defined.document ) {\n\t\treturn;\n\t}\n\n\t// `onErrorFnPrev` initialized at top of scope\n\t// Preserve other handlers\n\tvar onErrorFnPrev = window.onerror;\n\n\t// Cover uncaught exceptions\n\t// Returning true will suppress the default browser handler,\n\t// returning false will let it run.\n\twindow.onerror = function( error, filePath, linerNr ) {\n\t\tvar ret = false;\n\t\tif ( onErrorFnPrev ) {\n\t\t\tret = onErrorFnPrev( error, filePath, linerNr );\n\t\t}\n\n\t\t// Treat return value as window.onerror itself does,\n\t\t// Only do our handling if not suppressed.\n\t\tif ( ret !== true ) {\n\t\t\tif ( QUnit.config.current ) {\n\t\t\t\tif ( QUnit.config.current.ignoreGlobalErrors ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t} else {\n\t\t\t\tQUnit.test( \"global failure\", extend( function() {\n\t\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t\t}, { validTest: true } ) );\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\treturn ret;\n\t};\n}() );\n\n// Figure out if we're running the tests from a server or not\nQUnit.isLocal = !( defined.document && window.location.protocol !== \"file:\" );\n\n// Expose the current QUnit version\nQUnit.version = \"1.23.1\";\n\nextend( QUnit, {\n\n\t// Call on start of module test to prepend name to all tests\n\tmodule: function( name, testEnvironment, executeNow ) {\n\t\tvar module, moduleFns;\n\t\tvar currentModule = config.currentModule;\n\n\t\tif ( arguments.length === 2 ) {\n\t\t\tif ( objectType( testEnvironment ) === \"function\" ) {\n\t\t\t\texecuteNow = testEnvironment;\n\t\t\t\ttestEnvironment = undefined;\n\t\t\t}\n\t\t}\n\n\t\t// DEPRECATED: handles setup/teardown functions,\n\t\t// beforeEach and afterEach should be used instead\n\t\tif ( testEnvironment && testEnvironment.setup ) {\n\t\t\ttestEnvironment.beforeEach = testEnvironment.setup;\n\t\t\tdelete testEnvironment.setup;\n\t\t}\n\t\tif ( testEnvironment && testEnvironment.teardown ) {\n\t\t\ttestEnvironment.afterEach = testEnvironment.teardown;\n\t\t\tdelete testEnvironment.teardown;\n\t\t}\n\n\t\tmodule = createModule();\n\n\t\tmoduleFns = {\n\t\t\tbeforeEach: setHook( module, \"beforeEach\" ),\n\t\t\tafterEach: setHook( module, \"afterEach\" )\n\t\t};\n\n\t\tif ( objectType( executeNow ) === \"function\" ) {\n\t\t\tconfig.moduleStack.push( module );\n\t\t\tsetCurrentModule( module );\n\t\t\texecuteNow.call( module.testEnvironment, moduleFns );\n\t\t\tconfig.moduleStack.pop();\n\t\t\tmodule = module.parentModule || currentModule;\n\t\t}\n\n\t\tsetCurrentModule( module );\n\n\t\tfunction createModule() {\n\t\t\tvar parentModule = config.moduleStack.length ?\n\t\t\t\tconfig.moduleStack.slice( -1 )[ 0 ] : null;\n\t\t\tvar moduleName = parentModule !== null ?\n\t\t\t\t[ parentModule.name, name ].join( \" > \" ) : name;\n\t\t\tvar module = {\n\t\t\t\tname: moduleName,\n\t\t\t\tparentModule: parentModule,\n\t\t\t\ttests: [],\n\t\t\t\tmoduleId: generateHash( moduleName )\n\t\t\t};\n\n\t\t\tvar env = {};\n\t\t\tif ( parentModule ) {\n\t\t\t\textend( env, parentModule.testEnvironment );\n\t\t\t\tdelete env.beforeEach;\n\t\t\t\tdelete env.afterEach;\n\t\t\t}\n\t\t\textend( env, testEnvironment );\n\t\t\tmodule.testEnvironment = env;\n\n\t\t\tconfig.modules.push( module );\n\t\t\treturn module;\n\t\t}\n\n\t\tfunction setCurrentModule( module ) {\n\t\t\tconfig.currentModule = module;\n\t\t}\n\n\t},\n\n\t// DEPRECATED: QUnit.asyncTest() will be removed in QUnit 2.0.\n\tasyncTest: asyncTest,\n\n\ttest: test,\n\n\tskip: skip,\n\n\tonly: only,\n\n\t// DEPRECATED: The functionality of QUnit.start() will be altered in QUnit 2.0.\n\t// In QUnit 2.0, invoking it will ONLY affect the `QUnit.config.autostart` blocking behavior.\n\tstart: function( count ) {\n\t\tvar globalStartAlreadyCalled = globalStartCalled;\n\n\t\tif ( !config.current ) {\n\t\t\tglobalStartCalled = true;\n\n\t\t\tif ( runStarted ) {\n\t\t\t\tthrow new Error( \"Called start() outside of a test context while already started\" );\n\t\t\t} else if ( globalStartAlreadyCalled || count > 1 ) {\n\t\t\t\tthrow new Error( \"Called start() outside of a test context too many times\" );\n\t\t\t} else if ( config.autostart ) {\n\t\t\t\tthrow new Error( \"Called start() outside of a test context when \" +\n\t\t\t\t\t\"QUnit.config.autostart was true\" );\n\t\t\t} else if ( !config.pageLoaded ) {\n\n\t\t\t\t// The page isn't completely loaded yet, so bail out and let `QUnit.load` handle it\n\t\t\t\tconfig.autostart = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\n\t\t\t// If a test is running, adjust its semaphore\n\t\t\tconfig.current.semaphore -= count || 1;\n\n\t\t\t// If semaphore is non-numeric, throw error\n\t\t\tif ( isNaN( config.current.semaphore ) ) {\n\t\t\t\tconfig.current.semaphore = 0;\n\n\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\"Called start() with a non-numeric decrement.\",\n\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't start until equal number of stop-calls\n\t\t\tif ( config.current.semaphore > 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Throw an Error if start is called more often than stop\n\t\t\tif ( config.current.semaphore < 0 ) {\n\t\t\t\tconfig.current.semaphore = 0;\n\n\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\"Called start() while already started (test's semaphore was 0 already)\",\n\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tresumeProcessing();\n\t},\n\n\t// DEPRECATED: QUnit.stop() will be removed in QUnit 2.0.\n\tstop: function( count ) {\n\n\t\t// If there isn't a test running, don't allow QUnit.stop() to be called\n\t\tif ( !config.current ) {\n\t\t\tthrow new Error( \"Called stop() outside of a test context\" );\n\t\t}\n\n\t\t// If a test is running, adjust its semaphore\n\t\tconfig.current.semaphore += count || 1;\n\n\t\tpauseProcessing();\n\t},\n\n\tconfig: config,\n\n\tis: is,\n\n\tobjectType: objectType,\n\n\textend: extend,\n\n\tload: function() {\n\t\tconfig.pageLoaded = true;\n\n\t\t// Initialize the configuration options\n\t\textend( config, {\n\t\t\tstats: { all: 0, bad: 0 },\n\t\t\tmoduleStats: { all: 0, bad: 0 },\n\t\t\tstarted: 0,\n\t\t\tupdateRate: 1000,\n\t\t\tautostart: true,\n\t\t\tfilter: \"\"\n\t\t}, true );\n\n\t\tconfig.blocking = false;\n\n\t\tif ( config.autostart ) {\n\t\t\tresumeProcessing();\n\t\t}\n\t},\n\n\tstack: function( offset ) {\n\t\toffset = ( offset || 0 ) + 2;\n\t\treturn sourceFromStacktrace( offset );\n\t}\n} );\n\nregisterLoggingCallbacks( QUnit );\n\nfunction begin() {\n\tvar i, l,\n\t\tmodulesLog = [];\n\n\t// If the test run hasn't officially begun yet\n\tif ( !config.started ) {\n\n\t\t// Record the time of the test run's beginning\n\t\tconfig.started = now();\n\n\t\tverifyLoggingCallbacks();\n\n\t\t// Delete the loose unnamed module if unused.\n\t\tif ( config.modules[ 0 ].name === \"\" && config.modules[ 0 ].tests.length === 0 ) {\n\t\t\tconfig.modules.shift();\n\t\t}\n\n\t\t// Avoid unnecessary information by not logging modules' test environments\n\t\tfor ( i = 0, l = config.modules.length; i < l; i++ ) {\n\t\t\tmodulesLog.push( {\n\t\t\t\tname: config.modules[ i ].name,\n\t\t\t\ttests: config.modules[ i ].tests\n\t\t\t} );\n\t\t}\n\n\t\t// The test run is officially beginning now\n\t\trunLoggingCallbacks( \"begin\", {\n\t\t\ttotalTests: Test.count,\n\t\t\tmodules: modulesLog\n\t\t} );\n\t}\n\n\tconfig.blocking = false;\n\tprocess( true );\n}\n\nfunction process( last ) {\n\tfunction next() {\n\t\tprocess( last );\n\t}\n\tvar start = now();\n\tconfig.depth = ( config.depth || 0 ) + 1;\n\n\twhile ( config.queue.length && !config.blocking ) {\n\t\tif ( !defined.setTimeout || config.updateRate <= 0 ||\n\t\t\t\t( ( now() - start ) < config.updateRate ) ) {\n\t\t\tif ( config.current ) {\n\n\t\t\t\t// Reset async tracking for each phase of the Test lifecycle\n\t\t\t\tconfig.current.usedAsync = false;\n\t\t\t}\n\t\t\tconfig.queue.shift()();\n\t\t} else {\n\t\t\tsetTimeout( next, 13 );\n\t\t\tbreak;\n\t\t}\n\t}\n\tconfig.depth--;\n\tif ( last && !config.blocking && !config.queue.length && config.depth === 0 ) {\n\t\tdone();\n\t}\n}\n\nfunction pauseProcessing() {\n\tconfig.blocking = true;\n\n\tif ( config.testTimeout && defined.setTimeout ) {\n\t\tclearTimeout( config.timeout );\n\t\tconfig.timeout = setTimeout( function() {\n\t\t\tif ( config.current ) {\n\t\t\t\tconfig.current.semaphore = 0;\n\t\t\t\tQUnit.pushFailure( \"Test timed out\", sourceFromStacktrace( 2 ) );\n\t\t\t} else {\n\t\t\t\tthrow new Error( \"Test timed out\" );\n\t\t\t}\n\t\t\tresumeProcessing();\n\t\t}, config.testTimeout );\n\t}\n}\n\nfunction resumeProcessing() {\n\trunStarted = true;\n\n\t// A slight delay to allow this iteration of the event loop to finish (more assertions, etc.)\n\tif ( defined.setTimeout ) {\n\t\tsetTimeout( function() {\n\t\t\tif ( config.current && config.current.semaphore > 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( config.timeout ) {\n\t\t\t\tclearTimeout( config.timeout );\n\t\t\t}\n\n\t\t\tbegin();\n\t\t}, 13 );\n\t} else {\n\t\tbegin();\n\t}\n}\n\nfunction done() {\n\tvar runtime, passed;\n\n\tconfig.autorun = true;\n\n\t// Log the last module results\n\tif ( config.previousModule ) {\n\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\tname: config.previousModule.name,\n\t\t\ttests: config.previousModule.tests,\n\t\t\tfailed: config.moduleStats.bad,\n\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\ttotal: config.moduleStats.all,\n\t\t\truntime: now() - config.moduleStats.started\n\t\t} );\n\t}\n\tdelete config.previousModule;\n\n\truntime = now() - config.started;\n\tpassed = config.stats.all - config.stats.bad;\n\n\trunLoggingCallbacks( \"done\", {\n\t\tfailed: config.stats.bad,\n\t\tpassed: passed,\n\t\ttotal: config.stats.all,\n\t\truntime: runtime\n\t} );\n}\n\nfunction setHook( module, hookName ) {\n\tif ( module.testEnvironment === undefined ) {\n\t\tmodule.testEnvironment = {};\n\t}\n\n\treturn function( callback ) {\n\t\tmodule.testEnvironment[ hookName ] = callback;\n\t};\n}\n\nvar focused = false;\nvar priorityCount = 0;\nvar unitSampler;\n\nfunction Test( settings ) {\n\tvar i, l;\n\n\t++Test.count;\n\n\textend( this, settings );\n\tthis.assertions = [];\n\tthis.semaphore = 0;\n\tthis.usedAsync = false;\n\tthis.module = config.currentModule;\n\tthis.stack = sourceFromStacktrace( 3 );\n\n\t// Register unique strings\n\tfor ( i = 0, l = this.module.tests; i < l.length; i++ ) {\n\t\tif ( this.module.tests[ i ].name === this.testName ) {\n\t\t\tthis.testName += \" \";\n\t\t}\n\t}\n\n\tthis.testId = generateHash( this.module.name, this.testName );\n\n\tthis.module.tests.push( {\n\t\tname: this.testName,\n\t\ttestId: this.testId\n\t} );\n\n\tif ( settings.skip ) {\n\n\t\t// Skipped tests will fully ignore any sent callback\n\t\tthis.callback = function() {};\n\t\tthis.async = false;\n\t\tthis.expected = 0;\n\t} else {\n\t\tthis.assert = new Assert( this );\n\t}\n}\n\nTest.count = 0;\n\nTest.prototype = {\n\tbefore: function() {\n\t\tif (\n\n\t\t\t// Emit moduleStart when we're switching from one module to another\n\t\t\tthis.module !== config.previousModule ||\n\n\t\t\t\t// They could be equal (both undefined) but if the previousModule property doesn't\n\t\t\t\t// yet exist it means this is the first test in a suite that isn't wrapped in a\n\t\t\t\t// module, in which case we'll just emit a moduleStart event for 'undefined'.\n\t\t\t\t// Without this, reporters can get testStart before moduleStart  which is a problem.\n\t\t\t\t!hasOwn.call( config, \"previousModule\" )\n\t\t) {\n\t\t\tif ( hasOwn.call( config, \"previousModule\" ) ) {\n\t\t\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\t\t\tname: config.previousModule.name,\n\t\t\t\t\ttests: config.previousModule.tests,\n\t\t\t\t\tfailed: config.moduleStats.bad,\n\t\t\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\t\t\ttotal: config.moduleStats.all,\n\t\t\t\t\truntime: now() - config.moduleStats.started\n\t\t\t\t} );\n\t\t\t}\n\t\t\tconfig.previousModule = this.module;\n\t\t\tconfig.moduleStats = { all: 0, bad: 0, started: now() };\n\t\t\trunLoggingCallbacks( \"moduleStart\", {\n\t\t\t\tname: this.module.name,\n\t\t\t\ttests: this.module.tests\n\t\t\t} );\n\t\t}\n\n\t\tconfig.current = this;\n\n\t\tif ( this.module.testEnvironment ) {\n\t\t\tdelete this.module.testEnvironment.beforeEach;\n\t\t\tdelete this.module.testEnvironment.afterEach;\n\t\t}\n\t\tthis.testEnvironment = extend( {}, this.module.testEnvironment );\n\n\t\tthis.started = now();\n\t\trunLoggingCallbacks( \"testStart\", {\n\t\t\tname: this.testName,\n\t\t\tmodule: this.module.name,\n\t\t\ttestId: this.testId\n\t\t} );\n\n\t\tif ( !config.pollution ) {\n\t\t\tsaveGlobal();\n\t\t}\n\t},\n\n\trun: function() {\n\t\tvar promise;\n\n\t\tconfig.current = this;\n\n\t\tif ( this.async ) {\n\t\t\tQUnit.stop();\n\t\t}\n\n\t\tthis.callbackStarted = now();\n\n\t\tif ( config.notrycatch ) {\n\t\t\trunTest( this );\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\trunTest( this );\n\t\t} catch ( e ) {\n\t\t\tthis.pushFailure( \"Died on test #\" + ( this.assertions.length + 1 ) + \" \" +\n\t\t\t\tthis.stack + \": \" + ( e.message || e ), extractStacktrace( e, 0 ) );\n\n\t\t\t// Else next test will carry the responsibility\n\t\t\tsaveGlobal();\n\n\t\t\t// Restart the tests if they're blocking\n\t\t\tif ( config.blocking ) {\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t}\n\n\t\tfunction runTest( test ) {\n\t\t\tpromise = test.callback.call( test.testEnvironment, test.assert );\n\t\t\ttest.resolvePromise( promise );\n\t\t}\n\t},\n\n\tafter: function() {\n\t\tcheckPollution();\n\t},\n\n\tqueueHook: function( hook, hookName ) {\n\t\tvar promise,\n\t\t\ttest = this;\n\t\treturn function runHook() {\n\t\t\tconfig.current = test;\n\t\t\tif ( config.notrycatch ) {\n\t\t\t\tcallHook();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tcallHook();\n\t\t\t} catch ( error ) {\n\t\t\t\ttest.pushFailure( hookName + \" failed on \" + test.testName + \": \" +\n\t\t\t\t( error.message || error ), extractStacktrace( error, 0 ) );\n\t\t\t}\n\n\t\t\tfunction callHook() {\n\t\t\t\tpromise = hook.call( test.testEnvironment, test.assert );\n\t\t\t\ttest.resolvePromise( promise, hookName );\n\t\t\t}\n\t\t};\n\t},\n\n\t// Currently only used for module level hooks, can be used to add global level ones\n\thooks: function( handler ) {\n\t\tvar hooks = [];\n\n\t\tfunction processHooks( test, module ) {\n\t\t\tif ( module.parentModule ) {\n\t\t\t\tprocessHooks( test, module.parentModule );\n\t\t\t}\n\t\t\tif ( module.testEnvironment &&\n\t\t\t\tQUnit.objectType( module.testEnvironment[ handler ] ) === \"function\" ) {\n\t\t\t\thooks.push( test.queueHook( module.testEnvironment[ handler ], handler ) );\n\t\t\t}\n\t\t}\n\n\t\t// Hooks are ignored on skipped tests\n\t\tif ( !this.skip ) {\n\t\t\tprocessHooks( this, this.module );\n\t\t}\n\t\treturn hooks;\n\t},\n\n\tfinish: function() {\n\t\tconfig.current = this;\n\t\tif ( config.requireExpects && this.expected === null ) {\n\t\t\tthis.pushFailure( \"Expected number of assertions to be defined, but expect() was \" +\n\t\t\t\t\"not called.\", this.stack );\n\t\t} else if ( this.expected !== null && this.expected !== this.assertions.length ) {\n\t\t\tthis.pushFailure( \"Expected \" + this.expected + \" assertions, but \" +\n\t\t\t\tthis.assertions.length + \" were run\", this.stack );\n\t\t} else if ( this.expected === null && !this.assertions.length ) {\n\t\t\tthis.pushFailure( \"Expected at least one assertion, but none were run - call \" +\n\t\t\t\t\"expect(0) to accept zero assertions.\", this.stack );\n\t\t}\n\n\t\tvar i,\n\t\t\tbad = 0;\n\n\t\tthis.runtime = now() - this.started;\n\t\tconfig.stats.all += this.assertions.length;\n\t\tconfig.moduleStats.all += this.assertions.length;\n\n\t\tfor ( i = 0; i < this.assertions.length; i++ ) {\n\t\t\tif ( !this.assertions[ i ].result ) {\n\t\t\t\tbad++;\n\t\t\t\tconfig.stats.bad++;\n\t\t\t\tconfig.moduleStats.bad++;\n\t\t\t}\n\t\t}\n\n\t\trunLoggingCallbacks( \"testDone\", {\n\t\t\tname: this.testName,\n\t\t\tmodule: this.module.name,\n\t\t\tskipped: !!this.skip,\n\t\t\tfailed: bad,\n\t\t\tpassed: this.assertions.length - bad,\n\t\t\ttotal: this.assertions.length,\n\t\t\truntime: this.runtime,\n\n\t\t\t// HTML Reporter use\n\t\t\tassertions: this.assertions,\n\t\t\ttestId: this.testId,\n\n\t\t\t// Source of Test\n\t\t\tsource: this.stack,\n\n\t\t\t// DEPRECATED: this property will be removed in 2.0.0, use runtime instead\n\t\t\tduration: this.runtime\n\t\t} );\n\n\t\t// QUnit.reset() is deprecated and will be replaced for a new\n\t\t// fixture reset function on QUnit 2.0/2.1.\n\t\t// It's still called here for backwards compatibility handling\n\t\tQUnit.reset();\n\n\t\tconfig.current = undefined;\n\t},\n\n\tqueue: function() {\n\t\tvar priority,\n\t\t\ttest = this;\n\n\t\tif ( !this.valid() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction run() {\n\n\t\t\t// Each of these can by async\n\t\t\tsynchronize( [\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.before();\n\t\t\t\t},\n\n\t\t\t\ttest.hooks( \"beforeEach\" ),\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.run();\n\t\t\t\t},\n\n\t\t\t\ttest.hooks( \"afterEach\" ).reverse(),\n\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.after();\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.finish();\n\t\t\t\t}\n\t\t\t] );\n\t\t}\n\n\t\t// Prioritize previously failed tests, detected from sessionStorage\n\t\tpriority = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t\t+sessionStorage.getItem( \"qunit-test-\" + this.module.name + \"-\" + this.testName );\n\n\t\treturn synchronize( run, priority, config.seed );\n\t},\n\n\tpushResult: function( resultInfo ) {\n\n\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\tvar source,\n\t\t\tdetails = {\n\t\t\t\tmodule: this.module.name,\n\t\t\t\tname: this.testName,\n\t\t\t\tresult: resultInfo.result,\n\t\t\t\tmessage: resultInfo.message,\n\t\t\t\tactual: resultInfo.actual,\n\t\t\t\texpected: resultInfo.expected,\n\t\t\t\ttestId: this.testId,\n\t\t\t\tnegative: resultInfo.negative || false,\n\t\t\t\truntime: now() - this.started\n\t\t\t};\n\n\t\tif ( !resultInfo.result ) {\n\t\t\tsource = sourceFromStacktrace();\n\n\t\t\tif ( source ) {\n\t\t\t\tdetails.source = source;\n\t\t\t}\n\t\t}\n\n\t\trunLoggingCallbacks( \"log\", details );\n\n\t\tthis.assertions.push( {\n\t\t\tresult: !!resultInfo.result,\n\t\t\tmessage: resultInfo.message\n\t\t} );\n\t},\n\n\tpushFailure: function( message, source, actual ) {\n\t\tif ( !( this instanceof Test ) ) {\n\t\t\tthrow new Error( \"pushFailure() assertion outside test context, was \" +\n\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t}\n\n\t\tvar details = {\n\t\t\t\tmodule: this.module.name,\n\t\t\t\tname: this.testName,\n\t\t\t\tresult: false,\n\t\t\t\tmessage: message || \"error\",\n\t\t\t\tactual: actual || null,\n\t\t\t\ttestId: this.testId,\n\t\t\t\truntime: now() - this.started\n\t\t\t};\n\n\t\tif ( source ) {\n\t\t\tdetails.source = source;\n\t\t}\n\n\t\trunLoggingCallbacks( \"log\", details );\n\n\t\tthis.assertions.push( {\n\t\t\tresult: false,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tresolvePromise: function( promise, phase ) {\n\t\tvar then, message,\n\t\t\ttest = this;\n\t\tif ( promise != null ) {\n\t\t\tthen = promise.then;\n\t\t\tif ( QUnit.objectType( then ) === \"function\" ) {\n\t\t\t\tQUnit.stop();\n\t\t\t\tthen.call(\n\t\t\t\t\tpromise,\n\t\t\t\t\tfunction() { QUnit.start(); },\n\t\t\t\t\tfunction( error ) {\n\t\t\t\t\t\tmessage = \"Promise rejected \" +\n\t\t\t\t\t\t\t( !phase ? \"during\" : phase.replace( /Each$/, \"\" ) ) +\n\t\t\t\t\t\t\t\" \" + test.testName + \": \" + ( error.message || error );\n\t\t\t\t\t\ttest.pushFailure( message, extractStacktrace( error, 0 ) );\n\n\t\t\t\t\t\t// Else next test will carry the responsibility\n\t\t\t\t\t\tsaveGlobal();\n\n\t\t\t\t\t\t// Unblock\n\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\n\tvalid: function() {\n\t\tvar filter = config.filter,\n\t\t\tregexFilter = /^(!?)\\/([\\w\\W]*)\\/(i?$)/.exec( filter ),\n\t\t\tmodule = config.module && config.module.toLowerCase(),\n\t\t\tfullName = ( this.module.name + \": \" + this.testName );\n\n\t\tfunction moduleChainNameMatch( testModule ) {\n\t\t\tvar testModuleName = testModule.name ? testModule.name.toLowerCase() : null;\n\t\t\tif ( testModuleName === module ) {\n\t\t\t\treturn true;\n\t\t\t} else if ( testModule.parentModule ) {\n\t\t\t\treturn moduleChainNameMatch( testModule.parentModule );\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfunction moduleChainIdMatch( testModule ) {\n\t\t\treturn inArray( testModule.moduleId, config.moduleId ) > -1 ||\n\t\t\t\ttestModule.parentModule && moduleChainIdMatch( testModule.parentModule );\n\t\t}\n\n\t\t// Internally-generated tests are always valid\n\t\tif ( this.callback && this.callback.validTest ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( config.moduleId && config.moduleId.length > 0 &&\n\t\t\t!moduleChainIdMatch( this.module ) ) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( config.testId && config.testId.length > 0 &&\n\t\t\tinArray( this.testId, config.testId ) < 0 ) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( module && !moduleChainNameMatch( this.module ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !filter ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn regexFilter ?\n\t\t\tthis.regexFilter( !!regexFilter[ 1 ], regexFilter[ 2 ], regexFilter[ 3 ], fullName ) :\n\t\t\tthis.stringFilter( filter, fullName );\n\t},\n\n\tregexFilter: function( exclude, pattern, flags, fullName ) {\n\t\tvar regex = new RegExp( pattern, flags );\n\t\tvar match = regex.test( fullName );\n\n\t\treturn match !== exclude;\n\t},\n\n\tstringFilter: function( filter, fullName ) {\n\t\tfilter = filter.toLowerCase();\n\t\tfullName = fullName.toLowerCase();\n\n\t\tvar include = filter.charAt( 0 ) !== \"!\";\n\t\tif ( !include ) {\n\t\t\tfilter = filter.slice( 1 );\n\t\t}\n\n\t\t// If the filter matches, we need to honour include\n\t\tif ( fullName.indexOf( filter ) !== -1 ) {\n\t\t\treturn include;\n\t\t}\n\n\t\t// Otherwise, do the opposite\n\t\treturn !include;\n\t}\n};\n\n// Resets the test setup. Useful for tests that modify the DOM.\n/*\nDEPRECATED: Use multiple tests instead of resetting inside a test.\nUse testStart or testDone for custom cleanup.\nThis method will throw an error in 2.0, and will be removed in 2.1\n*/\nQUnit.reset = function() {\n\n\t// Return on non-browser environments\n\t// This is necessary to not break on node tests\n\tif ( !defined.document ) {\n\t\treturn;\n\t}\n\n\tvar fixture = defined.document && document.getElementById &&\n\t\t\tdocument.getElementById( \"qunit-fixture\" );\n\n\tif ( fixture ) {\n\t\tfixture.innerHTML = config.fixture;\n\t}\n};\n\nQUnit.pushFailure = function() {\n\tif ( !QUnit.config.current ) {\n\t\tthrow new Error( \"pushFailure() assertion outside test context, in \" +\n\t\t\tsourceFromStacktrace( 2 ) );\n\t}\n\n\t// Gets current test obj\n\tvar currentTest = QUnit.config.current;\n\n\treturn currentTest.pushFailure.apply( currentTest, arguments );\n};\n\n// Based on Java's String.hashCode, a simple but not\n// rigorously collision resistant hashing function\nfunction generateHash( module, testName ) {\n\tvar hex,\n\t\ti = 0,\n\t\thash = 0,\n\t\tstr = module + \"\\x1C\" + testName,\n\t\tlen = str.length;\n\n\tfor ( ; i < len; i++ ) {\n\t\thash  = ( ( hash << 5 ) - hash ) + str.charCodeAt( i );\n\t\thash |= 0;\n\t}\n\n\t// Convert the possibly negative integer hash code into an 8 character hex string, which isn't\n\t// strictly necessary but increases user understanding that the id is a SHA-like hash\n\thex = ( 0x100000000 + hash ).toString( 16 );\n\tif ( hex.length < 8 ) {\n\t\thex = \"0000000\" + hex;\n\t}\n\n\treturn hex.slice( -8 );\n}\n\nfunction synchronize( callback, priority, seed ) {\n\tvar last = !priority,\n\t\tindex;\n\n\tif ( QUnit.objectType( callback ) === \"array\" ) {\n\t\twhile ( callback.length ) {\n\t\t\tsynchronize( callback.shift() );\n\t\t}\n\t\treturn;\n\t}\n\n\tif ( priority ) {\n\t\tconfig.queue.splice( priorityCount++, 0, callback );\n\t} else if ( seed ) {\n\t\tif ( !unitSampler ) {\n\t\t\tunitSampler = unitSamplerGenerator( seed );\n\t\t}\n\n\t\t// Insert into a random position after all priority items\n\t\tindex = Math.floor( unitSampler() * ( config.queue.length - priorityCount + 1 ) );\n\t\tconfig.queue.splice( priorityCount + index, 0, callback );\n\t} else {\n\t\tconfig.queue.push( callback );\n\t}\n\n\tif ( config.autorun && !config.blocking ) {\n\t\tprocess( last );\n\t}\n}\n\nfunction unitSamplerGenerator( seed ) {\n\n\t// 32-bit xorshift, requires only a nonzero seed\n\t// http://excamera.com/sphinx/article-xorshift.html\n\tvar sample = parseInt( generateHash( seed ), 16 ) || -1;\n\treturn function() {\n\t\tsample ^= sample << 13;\n\t\tsample ^= sample >>> 17;\n\t\tsample ^= sample << 5;\n\n\t\t// ECMAScript has no unsigned number type\n\t\tif ( sample < 0 ) {\n\t\t\tsample += 0x100000000;\n\t\t}\n\n\t\treturn sample / 0x100000000;\n\t};\n}\n\nfunction saveGlobal() {\n\tconfig.pollution = [];\n\n\tif ( config.noglobals ) {\n\t\tfor ( var key in global ) {\n\t\t\tif ( hasOwn.call( global, key ) ) {\n\n\t\t\t\t// In Opera sometimes DOM element ids show up here, ignore them\n\t\t\t\tif ( /^qunit-test-output/.test( key ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconfig.pollution.push( key );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction checkPollution() {\n\tvar newGlobals,\n\t\tdeletedGlobals,\n\t\told = config.pollution;\n\n\tsaveGlobal();\n\n\tnewGlobals = diff( config.pollution, old );\n\tif ( newGlobals.length > 0 ) {\n\t\tQUnit.pushFailure( \"Introduced global variable(s): \" + newGlobals.join( \", \" ) );\n\t}\n\n\tdeletedGlobals = diff( old, config.pollution );\n\tif ( deletedGlobals.length > 0 ) {\n\t\tQUnit.pushFailure( \"Deleted global variable(s): \" + deletedGlobals.join( \", \" ) );\n\t}\n}\n\n// Will be exposed as QUnit.asyncTest\nfunction asyncTest( testName, expected, callback ) {\n\tif ( arguments.length === 2 ) {\n\t\tcallback = expected;\n\t\texpected = null;\n\t}\n\n\tQUnit.test( testName, expected, callback, true );\n}\n\n// Will be exposed as QUnit.test\nfunction test( testName, expected, callback, async ) {\n\tif ( focused )  { return; }\n\n\tvar newTest;\n\n\tif ( arguments.length === 2 ) {\n\t\tcallback = expected;\n\t\texpected = null;\n\t}\n\n\tnewTest = new Test( {\n\t\ttestName: testName,\n\t\texpected: expected,\n\t\tasync: async,\n\t\tcallback: callback\n\t} );\n\n\tnewTest.queue();\n}\n\n// Will be exposed as QUnit.skip\nfunction skip( testName ) {\n\tif ( focused )  { return; }\n\n\tvar test = new Test( {\n\t\ttestName: testName,\n\t\tskip: true\n\t} );\n\n\ttest.queue();\n}\n\n// Will be exposed as QUnit.only\nfunction only( testName, expected, callback, async ) {\n\tvar newTest;\n\n\tif ( focused )  { return; }\n\n\tQUnit.config.queue.length = 0;\n\tfocused = true;\n\n\tif ( arguments.length === 2 ) {\n\t\tcallback = expected;\n\t\texpected = null;\n\t}\n\n\tnewTest = new Test( {\n\t\ttestName: testName,\n\t\texpected: expected,\n\t\tasync: async,\n\t\tcallback: callback\n\t} );\n\n\tnewTest.queue();\n}\n\nfunction Assert( testContext ) {\n\tthis.test = testContext;\n}\n\n// Assert helpers\nQUnit.assert = Assert.prototype = {\n\n\t// Specify the number of expected assertions to guarantee that failed test\n\t// (no assertions are run at all) don't slip through.\n\texpect: function( asserts ) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\tthis.test.expected = asserts;\n\t\t} else {\n\t\t\treturn this.test.expected;\n\t\t}\n\t},\n\n\t// Increment this Test's semaphore counter, then return a function that\n\t// decrements that counter a maximum of once.\n\tasync: function( count ) {\n\t\tvar test = this.test,\n\t\t\tpopped = false,\n\t\t\tacceptCallCount = count;\n\n\t\tif ( typeof acceptCallCount === \"undefined\" ) {\n\t\t\tacceptCallCount = 1;\n\t\t}\n\n\t\ttest.semaphore += 1;\n\t\ttest.usedAsync = true;\n\t\tpauseProcessing();\n\n\t\treturn function done() {\n\n\t\t\tif ( popped ) {\n\t\t\t\ttest.pushFailure( \"Too many calls to the `assert.async` callback\",\n\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tacceptCallCount -= 1;\n\t\t\tif ( acceptCallCount > 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttest.semaphore -= 1;\n\t\t\tpopped = true;\n\t\t\tresumeProcessing();\n\t\t};\n\t},\n\n\t// Exports test.push() to the user API\n\t// Alias of pushResult.\n\tpush: function( result, actual, expected, message, negative ) {\n\t\tvar currentAssert = this instanceof Assert ? this : QUnit.config.current.assert;\n\t\treturn currentAssert.pushResult( {\n\t\t\tresult: result,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: negative\n\t\t} );\n\t},\n\n\tpushResult: function( resultInfo ) {\n\n\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\tvar assert = this,\n\t\t\tcurrentTest = ( assert instanceof Assert && assert.test ) || QUnit.config.current;\n\n\t\t// Backwards compatibility fix.\n\t\t// Allows the direct use of global exported assertions and QUnit.assert.*\n\t\t// Although, it's use is not recommended as it can leak assertions\n\t\t// to other tests from async tests, because we only get a reference to the current test,\n\t\t// not exactly the test where assertion were intended to be called.\n\t\tif ( !currentTest ) {\n\t\t\tthrow new Error( \"assertion outside test context, in \" + sourceFromStacktrace( 2 ) );\n\t\t}\n\n\t\tif ( currentTest.usedAsync === true && currentTest.semaphore === 0 ) {\n\t\t\tcurrentTest.pushFailure( \"Assertion after the final `assert.async` was resolved\",\n\t\t\t\tsourceFromStacktrace( 2 ) );\n\n\t\t\t// Allow this assertion to continue running anyway...\n\t\t}\n\n\t\tif ( !( assert instanceof Assert ) ) {\n\t\t\tassert = currentTest.assert;\n\t\t}\n\n\t\treturn assert.test.pushResult( resultInfo );\n\t},\n\n\tok: function( result, message ) {\n\t\tmessage = message || ( result ? \"okay\" : \"failed, expected argument to be truthy, was: \" +\n\t\t\tQUnit.dump.parse( result ) );\n\t\tthis.pushResult( {\n\t\t\tresult: !!result,\n\t\t\tactual: result,\n\t\t\texpected: true,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotOk: function( result, message ) {\n\t\tmessage = message || ( !result ? \"okay\" : \"failed, expected argument to be falsy, was: \" +\n\t\t\tQUnit.dump.parse( result ) );\n\t\tthis.pushResult( {\n\t\t\tresult: !result,\n\t\t\tactual: result,\n\t\t\texpected: false,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tequal: function( actual, expected, message ) {\n\t\t/*jshint eqeqeq:false */\n\t\tthis.pushResult( {\n\t\t\tresult: expected == actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotEqual: function( actual, expected, message ) {\n\t\t/*jshint eqeqeq:false */\n\t\tthis.pushResult( {\n\t\t\tresult: expected != actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\tpropEqual: function( actual, expected, message ) {\n\t\tactual = objectValues( actual );\n\t\texpected = objectValues( expected );\n\t\tthis.pushResult( {\n\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotPropEqual: function( actual, expected, message ) {\n\t\tactual = objectValues( actual );\n\t\texpected = objectValues( expected );\n\t\tthis.pushResult( {\n\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\tdeepEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotDeepEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\tstrictEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: expected === actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotStrictEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: expected !== actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\t\"throws\": function( block, expected, message ) {\n\t\tvar actual, expectedType,\n\t\t\texpectedOutput = expected,\n\t\t\tok = false,\n\t\t\tcurrentTest = ( this instanceof Assert && this.test ) || QUnit.config.current;\n\n\t\t// 'expected' is optional unless doing string comparison\n\t\tif ( message == null && typeof expected === \"string\" ) {\n\t\t\tmessage = expected;\n\t\t\texpected = null;\n\t\t}\n\n\t\tcurrentTest.ignoreGlobalErrors = true;\n\t\ttry {\n\t\t\tblock.call( currentTest.testEnvironment );\n\t\t} catch ( e ) {\n\t\t\tactual = e;\n\t\t}\n\t\tcurrentTest.ignoreGlobalErrors = false;\n\n\t\tif ( actual ) {\n\t\t\texpectedType = QUnit.objectType( expected );\n\n\t\t\t// We don't want to validate thrown error\n\t\t\tif ( !expected ) {\n\t\t\t\tok = true;\n\t\t\t\texpectedOutput = null;\n\n\t\t\t// Expected is a regexp\n\t\t\t} else if ( expectedType === \"regexp\" ) {\n\t\t\t\tok = expected.test( errorString( actual ) );\n\n\t\t\t// Expected is a string\n\t\t\t} else if ( expectedType === \"string\" ) {\n\t\t\t\tok = expected === errorString( actual );\n\n\t\t\t// Expected is a constructor, maybe an Error constructor\n\t\t\t} else if ( expectedType === \"function\" && actual instanceof expected ) {\n\t\t\t\tok = true;\n\n\t\t\t// Expected is an Error object\n\t\t\t} else if ( expectedType === \"object\" ) {\n\t\t\t\tok = actual instanceof expected.constructor &&\n\t\t\t\t\tactual.name === expected.name &&\n\t\t\t\t\tactual.message === expected.message;\n\n\t\t\t// Expected is a validation function which returns true if validation passed\n\t\t\t} else if ( expectedType === \"function\" && expected.call( {}, actual ) === true ) {\n\t\t\t\texpectedOutput = null;\n\t\t\t\tok = true;\n\t\t\t}\n\t\t}\n\n\t\tcurrentTest.assert.pushResult( {\n\t\t\tresult: ok,\n\t\t\tactual: actual,\n\t\t\texpected: expectedOutput,\n\t\t\tmessage: message\n\t\t} );\n\t}\n};\n\n// Provide an alternative to assert.throws(), for environments that consider throws a reserved word\n// Known to us are: Closure Compiler, Narwhal\n( function() {\n\t/*jshint sub:true */\n\tAssert.prototype.raises = Assert.prototype [ \"throws\" ]; //jscs:ignore requireDotNotation\n}() );\n\nfunction errorString( error ) {\n\tvar name, message,\n\t\tresultErrorString = error.toString();\n\tif ( resultErrorString.substring( 0, 7 ) === \"[object\" ) {\n\t\tname = error.name ? error.name.toString() : \"Error\";\n\t\tmessage = error.message ? error.message.toString() : \"\";\n\t\tif ( name && message ) {\n\t\t\treturn name + \": \" + message;\n\t\t} else if ( name ) {\n\t\t\treturn name;\n\t\t} else if ( message ) {\n\t\t\treturn message;\n\t\t} else {\n\t\t\treturn \"Error\";\n\t\t}\n\t} else {\n\t\treturn resultErrorString;\n\t}\n}\n\n// Test for equality any JavaScript type.\n// Author: Philippe Rathé <prathe@gmail.com>\nQUnit.equiv = ( function() {\n\n\t// Stack to decide between skip/abort functions\n\tvar callers = [];\n\n\t// Stack to avoiding loops from circular referencing\n\tvar parents = [];\n\tvar parentsB = [];\n\n\tvar getProto = Object.getPrototypeOf || function( obj ) {\n\n\t\t/*jshint proto: true */\n\t\treturn obj.__proto__;\n\t};\n\n\tfunction useStrictEquality( b, a ) {\n\n\t\t// To catch short annotation VS 'new' annotation of a declaration. e.g.:\n\t\t// `var i = 1;`\n\t\t// `var j = new Number(1);`\n\t\tif ( typeof a === \"object\" ) {\n\t\t\ta = a.valueOf();\n\t\t}\n\t\tif ( typeof b === \"object\" ) {\n\t\t\tb = b.valueOf();\n\t\t}\n\n\t\treturn a === b;\n\t}\n\n\tfunction compareConstructors( a, b ) {\n\t\tvar protoA = getProto( a );\n\t\tvar protoB = getProto( b );\n\n\t\t// Comparing constructors is more strict than using `instanceof`\n\t\tif ( a.constructor === b.constructor ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Ref #851\n\t\t// If the obj prototype descends from a null constructor, treat it\n\t\t// as a null prototype.\n\t\tif ( protoA && protoA.constructor === null ) {\n\t\t\tprotoA = null;\n\t\t}\n\t\tif ( protoB && protoB.constructor === null ) {\n\t\t\tprotoB = null;\n\t\t}\n\n\t\t// Allow objects with no prototype to be equivalent to\n\t\t// objects with Object as their constructor.\n\t\tif ( ( protoA === null && protoB === Object.prototype ) ||\n\t\t\t\t( protoB === null && protoA === Object.prototype ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfunction getRegExpFlags( regexp ) {\n\t\treturn \"flags\" in regexp ? regexp.flags : regexp.toString().match( /[gimuy]*$/ )[ 0 ];\n\t}\n\n\tvar callbacks = {\n\t\t\"string\": useStrictEquality,\n\t\t\"boolean\": useStrictEquality,\n\t\t\"number\": useStrictEquality,\n\t\t\"null\": useStrictEquality,\n\t\t\"undefined\": useStrictEquality,\n\t\t\"symbol\": useStrictEquality,\n\t\t\"date\": useStrictEquality,\n\n\t\t\"nan\": function() {\n\t\t\treturn true;\n\t\t},\n\n\t\t\"regexp\": function( b, a ) {\n\t\t\treturn a.source === b.source &&\n\n\t\t\t\t// Include flags in the comparison\n\t\t\t\tgetRegExpFlags( a ) === getRegExpFlags( b );\n\t\t},\n\n\t\t// - skip when the property is a method of an instance (OOP)\n\t\t// - abort otherwise,\n\t\t// initial === would have catch identical references anyway\n\t\t\"function\": function() {\n\t\t\tvar caller = callers[ callers.length - 1 ];\n\t\t\treturn caller !== Object && typeof caller !== \"undefined\";\n\t\t},\n\n\t\t\"array\": function( b, a ) {\n\t\t\tvar i, j, len, loop, aCircular, bCircular;\n\n\t\t\tlen = a.length;\n\t\t\tif ( len !== b.length ) {\n\n\t\t\t\t// Safe and faster\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Track reference to avoid circular references\n\t\t\tparents.push( a );\n\t\t\tparentsB.push( b );\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tloop = false;\n\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparents.pop();\n\t\t\t\t\t\t\tparentsB.pop();\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\tparents.pop();\n\t\t\t\t\tparentsB.pop();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparents.pop();\n\t\t\tparentsB.pop();\n\t\t\treturn true;\n\t\t},\n\n\t\t\"set\": function( b, a ) {\n\t\t\tvar innerEq,\n\t\t\t\touterEq = true;\n\n\t\t\tif ( a.size !== b.size ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ta.forEach( function( aVal ) {\n\t\t\t\tinnerEq = false;\n\n\t\t\t\tb.forEach( function( bVal ) {\n\t\t\t\t\tif ( innerEquiv( bVal, aVal ) ) {\n\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\touterEq = false;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn outerEq;\n\t\t},\n\n\t\t\"map\": function( b, a ) {\n\t\t\tvar innerEq,\n\t\t\t\touterEq = true;\n\n\t\t\tif ( a.size !== b.size ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ta.forEach( function( aVal, aKey ) {\n\t\t\t\tinnerEq = false;\n\n\t\t\t\tb.forEach( function( bVal, bKey ) {\n\t\t\t\t\tif ( innerEquiv( [ bVal, bKey ], [ aVal, aKey ] ) ) {\n\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\touterEq = false;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn outerEq;\n\t\t},\n\n\t\t\"object\": function( b, a ) {\n\t\t\tvar i, j, loop, aCircular, bCircular;\n\n\t\t\t// Default to true\n\t\t\tvar eq = true;\n\t\t\tvar aProperties = [];\n\t\t\tvar bProperties = [];\n\n\t\t\tif ( compareConstructors( a, b ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Stack constructor before traversing properties\n\t\t\tcallers.push( a.constructor );\n\n\t\t\t// Track reference to avoid circular references\n\t\t\tparents.push( a );\n\t\t\tparentsB.push( b );\n\n\t\t\t// Be strict: don't ensure hasOwnProperty and go deep\n\t\t\tfor ( i in a ) {\n\t\t\t\tloop = false;\n\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\teq = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\taProperties.push( i );\n\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\teq = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparents.pop();\n\t\t\tparentsB.pop();\n\n\t\t\t// Unstack, we are done\n\t\t\tcallers.pop();\n\n\t\t\tfor ( i in b ) {\n\n\t\t\t\t// Collect b's properties\n\t\t\t\tbProperties.push( i );\n\t\t\t}\n\n\t\t\t// Ensures identical properties name\n\t\t\treturn eq && innerEquiv( aProperties.sort(), bProperties.sort() );\n\t\t}\n\t};\n\n\tfunction typeEquiv( a, b ) {\n\t\tvar type = QUnit.objectType( a );\n\t\treturn QUnit.objectType( b ) === type && callbacks[ type ]( b, a );\n\t}\n\n\t// The real equiv function\n\tfunction innerEquiv( a, b ) {\n\n\t\t// We're done when there's nothing more to compare\n\t\tif ( arguments.length < 2 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Require type-specific equality\n\t\treturn ( a === b || typeEquiv( a, b ) ) &&\n\n\t\t\t// ...across all consecutive argument pairs\n\t\t\t( arguments.length === 2 || innerEquiv.apply( this, [].slice.call( arguments, 1 ) ) );\n\t}\n\n\treturn innerEquiv;\n}() );\n\n// Based on jsDump by Ariel Flesler\n// http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html\nQUnit.dump = ( function() {\n\tfunction quote( str ) {\n\t\treturn \"\\\"\" + str.toString().replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\"/g, \"\\\\\\\"\" ) + \"\\\"\";\n\t}\n\tfunction literal( o ) {\n\t\treturn o + \"\";\n\t}\n\tfunction join( pre, arr, post ) {\n\t\tvar s = dump.separator(),\n\t\t\tbase = dump.indent(),\n\t\t\tinner = dump.indent( 1 );\n\t\tif ( arr.join ) {\n\t\t\tarr = arr.join( \",\" + s + inner );\n\t\t}\n\t\tif ( !arr ) {\n\t\t\treturn pre + post;\n\t\t}\n\t\treturn [ pre, inner + arr, base + post ].join( s );\n\t}\n\tfunction array( arr, stack ) {\n\t\tvar i = arr.length,\n\t\t\tret = new Array( i );\n\n\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\treturn \"[object Array]\";\n\t\t}\n\n\t\tthis.up();\n\t\twhile ( i-- ) {\n\t\t\tret[ i ] = this.parse( arr[ i ], undefined, stack );\n\t\t}\n\t\tthis.down();\n\t\treturn join( \"[\", ret, \"]\" );\n\t}\n\n\tvar reName = /^function (\\w+)/,\n\t\tdump = {\n\n\t\t\t// The objType is used mostly internally, you can fix a (custom) type in advance\n\t\t\tparse: function( obj, objType, stack ) {\n\t\t\t\tstack = stack || [];\n\t\t\t\tvar res, parser, parserType,\n\t\t\t\t\tinStack = inArray( obj, stack );\n\n\t\t\t\tif ( inStack !== -1 ) {\n\t\t\t\t\treturn \"recursion(\" + ( inStack - stack.length ) + \")\";\n\t\t\t\t}\n\n\t\t\t\tobjType = objType || this.typeOf( obj  );\n\t\t\t\tparser = this.parsers[ objType ];\n\t\t\t\tparserType = typeof parser;\n\n\t\t\t\tif ( parserType === \"function\" ) {\n\t\t\t\t\tstack.push( obj );\n\t\t\t\t\tres = parser.call( this, obj, stack );\n\t\t\t\t\tstack.pop();\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t\treturn ( parserType === \"string\" ) ? parser : this.parsers.error;\n\t\t\t},\n\t\t\ttypeOf: function( obj ) {\n\t\t\t\tvar type;\n\t\t\t\tif ( obj === null ) {\n\t\t\t\t\ttype = \"null\";\n\t\t\t\t} else if ( typeof obj === \"undefined\" ) {\n\t\t\t\t\ttype = \"undefined\";\n\t\t\t\t} else if ( QUnit.is( \"regexp\", obj ) ) {\n\t\t\t\t\ttype = \"regexp\";\n\t\t\t\t} else if ( QUnit.is( \"date\", obj ) ) {\n\t\t\t\t\ttype = \"date\";\n\t\t\t\t} else if ( QUnit.is( \"function\", obj ) ) {\n\t\t\t\t\ttype = \"function\";\n\t\t\t\t} else if ( obj.setInterval !== undefined &&\n\t\t\t\t\t\tobj.document !== undefined &&\n\t\t\t\t\t\tobj.nodeType === undefined ) {\n\t\t\t\t\ttype = \"window\";\n\t\t\t\t} else if ( obj.nodeType === 9 ) {\n\t\t\t\t\ttype = \"document\";\n\t\t\t\t} else if ( obj.nodeType ) {\n\t\t\t\t\ttype = \"node\";\n\t\t\t\t} else if (\n\n\t\t\t\t\t// Native arrays\n\t\t\t\t\ttoString.call( obj ) === \"[object Array]\" ||\n\n\t\t\t\t\t// NodeList objects\n\t\t\t\t\t( typeof obj.length === \"number\" && obj.item !== undefined &&\n\t\t\t\t\t( obj.length ? obj.item( 0 ) === obj[ 0 ] : ( obj.item( 0 ) === null &&\n\t\t\t\t\tobj[ 0 ] === undefined ) ) )\n\t\t\t\t) {\n\t\t\t\t\ttype = \"array\";\n\t\t\t\t} else if ( obj.constructor === Error.prototype.constructor ) {\n\t\t\t\t\ttype = \"error\";\n\t\t\t\t} else {\n\t\t\t\t\ttype = typeof obj;\n\t\t\t\t}\n\t\t\t\treturn type;\n\t\t\t},\n\n\t\t\tseparator: function() {\n\t\t\t\treturn this.multiline ? this.HTML ? \"<br />\" : \"\\n\" : this.HTML ? \"&#160;\" : \" \";\n\t\t\t},\n\n\t\t\t// Extra can be a number, shortcut for increasing-calling-decreasing\n\t\t\tindent: function( extra ) {\n\t\t\t\tif ( !this.multiline ) {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t\tvar chr = this.indentChar;\n\t\t\t\tif ( this.HTML ) {\n\t\t\t\t\tchr = chr.replace( /\\t/g, \"   \" ).replace( / /g, \"&#160;\" );\n\t\t\t\t}\n\t\t\t\treturn new Array( this.depth + ( extra || 0 ) ).join( chr );\n\t\t\t},\n\t\t\tup: function( a ) {\n\t\t\t\tthis.depth += a || 1;\n\t\t\t},\n\t\t\tdown: function( a ) {\n\t\t\t\tthis.depth -= a || 1;\n\t\t\t},\n\t\t\tsetParser: function( name, parser ) {\n\t\t\t\tthis.parsers[ name ] = parser;\n\t\t\t},\n\n\t\t\t// The next 3 are exposed so you can use them\n\t\t\tquote: quote,\n\t\t\tliteral: literal,\n\t\t\tjoin: join,\n\t\t\tdepth: 1,\n\t\t\tmaxDepth: QUnit.config.maxDepth,\n\n\t\t\t// This is the list of parsers, to modify them, use dump.setParser\n\t\t\tparsers: {\n\t\t\t\twindow: \"[Window]\",\n\t\t\t\tdocument: \"[Document]\",\n\t\t\t\terror: function( error ) {\n\t\t\t\t\treturn \"Error(\\\"\" + error.message + \"\\\")\";\n\t\t\t\t},\n\t\t\t\tunknown: \"[Unknown]\",\n\t\t\t\t\"null\": \"null\",\n\t\t\t\t\"undefined\": \"undefined\",\n\t\t\t\t\"function\": function( fn ) {\n\t\t\t\t\tvar ret = \"function\",\n\n\t\t\t\t\t\t// Functions never have name in IE\n\t\t\t\t\t\tname = \"name\" in fn ? fn.name : ( reName.exec( fn ) || [] )[ 1 ];\n\n\t\t\t\t\tif ( name ) {\n\t\t\t\t\t\tret += \" \" + name;\n\t\t\t\t\t}\n\t\t\t\t\tret += \"(\";\n\n\t\t\t\t\tret = [ ret, dump.parse( fn, \"functionArgs\" ), \"){\" ].join( \"\" );\n\t\t\t\t\treturn join( ret, dump.parse( fn, \"functionCode\" ), \"}\" );\n\t\t\t\t},\n\t\t\t\tarray: array,\n\t\t\t\tnodelist: array,\n\t\t\t\t\"arguments\": array,\n\t\t\t\tobject: function( map, stack ) {\n\t\t\t\t\tvar keys, key, val, i, nonEnumerableProperties,\n\t\t\t\t\t\tret = [];\n\n\t\t\t\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\t\t\t\treturn \"[object Object]\";\n\t\t\t\t\t}\n\n\t\t\t\t\tdump.up();\n\t\t\t\t\tkeys = [];\n\t\t\t\t\tfor ( key in map ) {\n\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Some properties are not always enumerable on Error objects.\n\t\t\t\t\tnonEnumerableProperties = [ \"message\", \"name\" ];\n\t\t\t\t\tfor ( i in nonEnumerableProperties ) {\n\t\t\t\t\t\tkey = nonEnumerableProperties[ i ];\n\t\t\t\t\t\tif ( key in map && inArray( key, keys ) < 0 ) {\n\t\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tkeys.sort();\n\t\t\t\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t\t\t\tkey = keys[ i ];\n\t\t\t\t\t\tval = map[ key ];\n\t\t\t\t\t\tret.push( dump.parse( key, \"key\" ) + \": \" +\n\t\t\t\t\t\t\tdump.parse( val, undefined, stack ) );\n\t\t\t\t\t}\n\t\t\t\t\tdump.down();\n\t\t\t\t\treturn join( \"{\", ret, \"}\" );\n\t\t\t\t},\n\t\t\t\tnode: function( node ) {\n\t\t\t\t\tvar len, i, val,\n\t\t\t\t\t\topen = dump.HTML ? \"&lt;\" : \"<\",\n\t\t\t\t\t\tclose = dump.HTML ? \"&gt;\" : \">\",\n\t\t\t\t\t\ttag = node.nodeName.toLowerCase(),\n\t\t\t\t\t\tret = open + tag,\n\t\t\t\t\t\tattrs = node.attributes;\n\n\t\t\t\t\tif ( attrs ) {\n\t\t\t\t\t\tfor ( i = 0, len = attrs.length; i < len; i++ ) {\n\t\t\t\t\t\t\tval = attrs[ i ].nodeValue;\n\n\t\t\t\t\t\t\t// IE6 includes all attributes in .attributes, even ones not explicitly\n\t\t\t\t\t\t\t// set. Those have values like undefined, null, 0, false, \"\" or\n\t\t\t\t\t\t\t// \"inherit\".\n\t\t\t\t\t\t\tif ( val && val !== \"inherit\" ) {\n\t\t\t\t\t\t\t\tret += \" \" + attrs[ i ].nodeName + \"=\" +\n\t\t\t\t\t\t\t\t\tdump.parse( val, \"attribute\" );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tret += close;\n\n\t\t\t\t\t// Show content of TextNode or CDATASection\n\t\t\t\t\tif ( node.nodeType === 3 || node.nodeType === 4 ) {\n\t\t\t\t\t\tret += node.nodeValue;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn ret + open + \"/\" + tag + close;\n\t\t\t\t},\n\n\t\t\t\t// Function calls it internally, it's the arguments part of the function\n\t\t\t\tfunctionArgs: function( fn ) {\n\t\t\t\t\tvar args,\n\t\t\t\t\t\tl = fn.length;\n\n\t\t\t\t\tif ( !l ) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\n\t\t\t\t\targs = new Array( l );\n\t\t\t\t\twhile ( l-- ) {\n\n\t\t\t\t\t\t// 97 is 'a'\n\t\t\t\t\t\targs[ l ] = String.fromCharCode( 97 + l );\n\t\t\t\t\t}\n\t\t\t\t\treturn \" \" + args.join( \", \" ) + \" \";\n\t\t\t\t},\n\n\t\t\t\t// Object calls it internally, the key part of an item in a map\n\t\t\t\tkey: quote,\n\n\t\t\t\t// Function calls it internally, it's the content of the function\n\t\t\t\tfunctionCode: \"[code]\",\n\n\t\t\t\t// Node calls it internally, it's a html attribute value\n\t\t\t\tattribute: quote,\n\t\t\t\tstring: quote,\n\t\t\t\tdate: quote,\n\t\t\t\tregexp: literal,\n\t\t\t\tnumber: literal,\n\t\t\t\t\"boolean\": literal\n\t\t\t},\n\n\t\t\t// If true, entities are escaped ( <, >, \\t, space and \\n )\n\t\t\tHTML: false,\n\n\t\t\t// Indentation unit\n\t\t\tindentChar: \"  \",\n\n\t\t\t// If true, items in a collection, are separated by a \\n, else just a space.\n\t\t\tmultiline: true\n\t\t};\n\n\treturn dump;\n}() );\n\n// Back compat\nQUnit.jsDump = QUnit.dump;\n\n// Deprecated\n// Extend assert methods to QUnit for Backwards compatibility\n( function() {\n\tvar i,\n\t\tassertions = Assert.prototype;\n\n\tfunction applyCurrent( current ) {\n\t\treturn function() {\n\t\t\tvar assert = new Assert( QUnit.config.current );\n\t\t\tcurrent.apply( assert, arguments );\n\t\t};\n\t}\n\n\tfor ( i in assertions ) {\n\t\tQUnit[ i ] = applyCurrent( assertions[ i ] );\n\t}\n}() );\n\n// For browser, export only select globals\nif ( defined.document ) {\n\n\t( function() {\n\t\tvar i, l,\n\t\t\tkeys = [\n\t\t\t\t\"test\",\n\t\t\t\t\"module\",\n\t\t\t\t\"expect\",\n\t\t\t\t\"asyncTest\",\n\t\t\t\t\"start\",\n\t\t\t\t\"stop\",\n\t\t\t\t\"ok\",\n\t\t\t\t\"notOk\",\n\t\t\t\t\"equal\",\n\t\t\t\t\"notEqual\",\n\t\t\t\t\"propEqual\",\n\t\t\t\t\"notPropEqual\",\n\t\t\t\t\"deepEqual\",\n\t\t\t\t\"notDeepEqual\",\n\t\t\t\t\"strictEqual\",\n\t\t\t\t\"notStrictEqual\",\n\t\t\t\t\"throws\",\n\t\t\t\t\"raises\"\n\t\t\t];\n\n\t\tfor ( i = 0, l = keys.length; i < l; i++ ) {\n\t\t\twindow[ keys[ i ] ] = QUnit[ keys[ i ] ];\n\t\t}\n\t}() );\n\n\twindow.QUnit = QUnit;\n}\n\n// For nodejs\nif ( typeof module !== \"undefined\" && module && module.exports ) {\n\tmodule.exports = QUnit;\n\n\t// For consistency with CommonJS environments' exports\n\tmodule.exports.QUnit = QUnit;\n}\n\n// For CommonJS with exports, but without module.exports, like Rhino\nif ( typeof exports !== \"undefined\" && exports ) {\n\texports.QUnit = QUnit;\n}\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( function() {\n\t\treturn QUnit;\n\t} );\n\tQUnit.config.autostart = false;\n}\n\n// Get a reference to the global object, like window in browsers\n}( ( function() {\n\treturn this;\n}() ) ) );\n\n( function() {\n\n// Only interact with URLs via window.location\nvar location = typeof window !== \"undefined\" && window.location;\nif ( !location ) {\n\treturn;\n}\n\nvar urlParams = getUrlParams();\n\nQUnit.urlParams = urlParams;\n\n// Match module/test by inclusion in an array\nQUnit.config.moduleId = [].concat( urlParams.moduleId || [] );\nQUnit.config.testId = [].concat( urlParams.testId || [] );\n\n// Exact case-insensitive match of the module name\nQUnit.config.module = urlParams.module;\n\n// Regular expression or case-insenstive substring match against \"moduleName: testName\"\nQUnit.config.filter = urlParams.filter;\n\n// Test order randomization\nif ( urlParams.seed === true ) {\n\n\t// Generate a random seed if the option is specified without a value\n\tQUnit.config.seed = Math.random().toString( 36 ).slice( 2 );\n} else if ( urlParams.seed ) {\n\tQUnit.config.seed = urlParams.seed;\n}\n\n// Add URL-parameter-mapped config values with UI form rendering data\nQUnit.config.urlConfig.push(\n\t{\n\t\tid: \"hidepassed\",\n\t\tlabel: \"Hide passed tests\",\n\t\ttooltip: \"Only show tests and assertions that fail. Stored as query-strings.\"\n\t},\n\t{\n\t\tid: \"noglobals\",\n\t\tlabel: \"Check for Globals\",\n\t\ttooltip: \"Enabling this will test if any test introduces new properties on the \" +\n\t\t\t\"global object (`window` in Browsers). Stored as query-strings.\"\n\t},\n\t{\n\t\tid: \"notrycatch\",\n\t\tlabel: \"No try-catch\",\n\t\ttooltip: \"Enabling this will run tests outside of a try-catch block. Makes debugging \" +\n\t\t\t\"exceptions in IE reasonable. Stored as query-strings.\"\n\t}\n);\n\nQUnit.begin( function() {\n\tvar i, option,\n\t\turlConfig = QUnit.config.urlConfig;\n\n\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\n\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\toption = QUnit.config.urlConfig[ i ];\n\t\tif ( typeof option !== \"string\" ) {\n\t\t\toption = option.id;\n\t\t}\n\n\t\tif ( QUnit.config[ option ] === undefined ) {\n\t\t\tQUnit.config[ option ] = urlParams[ option ];\n\t\t}\n\t}\n} );\n\nfunction getUrlParams() {\n\tvar i, param, name, value;\n\tvar urlParams = {};\n\tvar params = location.search.slice( 1 ).split( \"&\" );\n\tvar length = params.length;\n\n\tfor ( i = 0; i < length; i++ ) {\n\t\tif ( params[ i ] ) {\n\t\t\tparam = params[ i ].split( \"=\" );\n\t\t\tname = decodeURIComponent( param[ 0 ] );\n\n\t\t\t// Allow just a key to turn on a flag, e.g., test.html?noglobals\n\t\t\tvalue = param.length === 1 ||\n\t\t\t\tdecodeURIComponent( param.slice( 1 ).join( \"=\" ) ) ;\n\t\t\tif ( urlParams[ name ] ) {\n\t\t\t\turlParams[ name ] = [].concat( urlParams[ name ], value );\n\t\t\t} else {\n\t\t\t\turlParams[ name ] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn urlParams;\n}\n\n// Don't load the HTML Reporter on non-browser environments\nif ( typeof window === \"undefined\" || !window.document ) {\n\treturn;\n}\n\n// Deprecated QUnit.init - Ref #530\n// Re-initialize the configuration options\nQUnit.init = function() {\n\tvar config = QUnit.config;\n\n\tconfig.stats = { all: 0, bad: 0 };\n\tconfig.moduleStats = { all: 0, bad: 0 };\n\tconfig.started = 0;\n\tconfig.updateRate = 1000;\n\tconfig.blocking = false;\n\tconfig.autostart = true;\n\tconfig.autorun = false;\n\tconfig.filter = \"\";\n\tconfig.queue = [];\n\n\tappendInterface();\n};\n\nvar config = QUnit.config,\n\tdocument = window.document,\n\tcollapseNext = false,\n\thasOwn = Object.prototype.hasOwnProperty,\n\tunfilteredUrl = setUrl( { filter: undefined, module: undefined,\n\t\tmoduleId: undefined, testId: undefined } ),\n\tdefined = {\n\t\tsessionStorage: ( function() {\n\t\t\tvar x = \"qunit-test-string\";\n\t\t\ttry {\n\t\t\t\tsessionStorage.setItem( x, x );\n\t\t\t\tsessionStorage.removeItem( x );\n\t\t\t\treturn true;\n\t\t\t} catch ( e ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}() )\n\t},\n\tmodulesList = [];\n\n/**\n* Escape text for attribute or text content.\n*/\nfunction escapeText( s ) {\n\tif ( !s ) {\n\t\treturn \"\";\n\t}\n\ts = s + \"\";\n\n\t// Both single quotes and double quotes (for attributes)\n\treturn s.replace( /['\"<>&]/g, function( s ) {\n\t\tswitch ( s ) {\n\t\tcase \"'\":\n\t\t\treturn \"&#039;\";\n\t\tcase \"\\\"\":\n\t\t\treturn \"&quot;\";\n\t\tcase \"<\":\n\t\t\treturn \"&lt;\";\n\t\tcase \">\":\n\t\t\treturn \"&gt;\";\n\t\tcase \"&\":\n\t\t\treturn \"&amp;\";\n\t\t}\n\t} );\n}\n\n/**\n * @param {HTMLElement} elem\n * @param {string} type\n * @param {Function} fn\n */\nfunction addEvent( elem, type, fn ) {\n\tif ( elem.addEventListener ) {\n\n\t\t// Standards-based browsers\n\t\telem.addEventListener( type, fn, false );\n\t} else if ( elem.attachEvent ) {\n\n\t\t// Support: IE <9\n\t\telem.attachEvent( \"on\" + type, function() {\n\t\t\tvar event = window.event;\n\t\t\tif ( !event.target ) {\n\t\t\t\tevent.target = event.srcElement || document;\n\t\t\t}\n\n\t\t\tfn.call( elem, event );\n\t\t} );\n\t}\n}\n\n/**\n * @param {Array|NodeList} elems\n * @param {string} type\n * @param {Function} fn\n */\nfunction addEvents( elems, type, fn ) {\n\tvar i = elems.length;\n\twhile ( i-- ) {\n\t\taddEvent( elems[ i ], type, fn );\n\t}\n}\n\nfunction hasClass( elem, name ) {\n\treturn ( \" \" + elem.className + \" \" ).indexOf( \" \" + name + \" \" ) >= 0;\n}\n\nfunction addClass( elem, name ) {\n\tif ( !hasClass( elem, name ) ) {\n\t\telem.className += ( elem.className ? \" \" : \"\" ) + name;\n\t}\n}\n\nfunction toggleClass( elem, name, force ) {\n\tif ( force || typeof force === \"undefined\" && !hasClass( elem, name ) ) {\n\t\taddClass( elem, name );\n\t} else {\n\t\tremoveClass( elem, name );\n\t}\n}\n\nfunction removeClass( elem, name ) {\n\tvar set = \" \" + elem.className + \" \";\n\n\t// Class name may appear multiple times\n\twhile ( set.indexOf( \" \" + name + \" \" ) >= 0 ) {\n\t\tset = set.replace( \" \" + name + \" \", \" \" );\n\t}\n\n\t// Trim for prettiness\n\telem.className = typeof set.trim === \"function\" ? set.trim() : set.replace( /^\\s+|\\s+$/g, \"\" );\n}\n\nfunction id( name ) {\n\treturn document.getElementById && document.getElementById( name );\n}\n\nfunction getUrlConfigHtml() {\n\tvar i, j, val,\n\t\tescaped, escapedTooltip,\n\t\tselection = false,\n\t\turlConfig = config.urlConfig,\n\t\turlConfigHtml = \"\";\n\n\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\n\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\tval = config.urlConfig[ i ];\n\t\tif ( typeof val === \"string\" ) {\n\t\t\tval = {\n\t\t\t\tid: val,\n\t\t\t\tlabel: val\n\t\t\t};\n\t\t}\n\n\t\tescaped = escapeText( val.id );\n\t\tescapedTooltip = escapeText( val.tooltip );\n\n\t\tif ( !val.value || typeof val.value === \"string\" ) {\n\t\t\turlConfigHtml += \"<input id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' name='\" + escaped + \"' type='checkbox'\" +\n\t\t\t\t( val.value ? \" value='\" + escapeText( val.value ) + \"'\" : \"\" ) +\n\t\t\t\t( config[ val.id ] ? \" checked='checked'\" : \"\" ) +\n\t\t\t\t\" title='\" + escapedTooltip + \"' /><label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label + \"</label>\";\n\t\t} else {\n\t\t\turlConfigHtml += \"<label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label +\n\t\t\t\t\": </label><select id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' name='\" + escaped + \"' title='\" + escapedTooltip + \"'><option></option>\";\n\n\t\t\tif ( QUnit.is( \"array\", val.value ) ) {\n\t\t\t\tfor ( j = 0; j < val.value.length; j++ ) {\n\t\t\t\t\tescaped = escapeText( val.value[ j ] );\n\t\t\t\t\turlConfigHtml += \"<option value='\" + escaped + \"'\" +\n\t\t\t\t\t\t( config[ val.id ] === val.value[ j ] ?\n\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\">\" + escaped + \"</option>\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( j in val.value ) {\n\t\t\t\t\tif ( hasOwn.call( val.value, j ) ) {\n\t\t\t\t\t\turlConfigHtml += \"<option value='\" + escapeText( j ) + \"'\" +\n\t\t\t\t\t\t\t( config[ val.id ] === j ?\n\t\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\t\">\" + escapeText( val.value[ j ] ) + \"</option>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( config[ val.id ] && !selection ) {\n\t\t\t\tescaped = escapeText( config[ val.id ] );\n\t\t\t\turlConfigHtml += \"<option value='\" + escaped +\n\t\t\t\t\t\"' selected='selected' disabled='disabled'>\" + escaped + \"</option>\";\n\t\t\t}\n\t\t\turlConfigHtml += \"</select>\";\n\t\t}\n\t}\n\n\treturn urlConfigHtml;\n}\n\n// Handle \"click\" events on toolbar checkboxes and \"change\" for select menus.\n// Updates the URL with the new state of `config.urlConfig` values.\nfunction toolbarChanged() {\n\tvar updatedUrl, value, tests,\n\t\tfield = this,\n\t\tparams = {};\n\n\t// Detect if field is a select menu or a checkbox\n\tif ( \"selectedIndex\" in field ) {\n\t\tvalue = field.options[ field.selectedIndex ].value || undefined;\n\t} else {\n\t\tvalue = field.checked ? ( field.defaultValue || true ) : undefined;\n\t}\n\n\tparams[ field.name ] = value;\n\tupdatedUrl = setUrl( params );\n\n\t// Check if we can apply the change without a page refresh\n\tif ( \"hidepassed\" === field.name && \"replaceState\" in window.history ) {\n\t\tQUnit.urlParams[ field.name ] = value;\n\t\tconfig[ field.name ] = value || false;\n\t\ttests = id( \"qunit-tests\" );\n\t\tif ( tests ) {\n\t\t\ttoggleClass( tests, \"hidepass\", value || false );\n\t\t}\n\t\twindow.history.replaceState( null, \"\", updatedUrl );\n\t} else {\n\t\twindow.location = updatedUrl;\n\t}\n}\n\nfunction setUrl( params ) {\n\tvar key, arrValue, i,\n\t\tquerystring = \"?\",\n\t\tlocation = window.location;\n\n\tparams = QUnit.extend( QUnit.extend( {}, QUnit.urlParams ), params );\n\n\tfor ( key in params ) {\n\n\t\t// Skip inherited or undefined properties\n\t\tif ( hasOwn.call( params, key ) && params[ key ] !== undefined ) {\n\n\t\t\t// Output a parameter for each value of this key (but usually just one)\n\t\t\tarrValue = [].concat( params[ key ] );\n\t\t\tfor ( i = 0; i < arrValue.length; i++ ) {\n\t\t\t\tquerystring += encodeURIComponent( key );\n\t\t\t\tif ( arrValue[ i ] !== true ) {\n\t\t\t\t\tquerystring += \"=\" + encodeURIComponent( arrValue[ i ] );\n\t\t\t\t}\n\t\t\t\tquerystring += \"&\";\n\t\t\t}\n\t\t}\n\t}\n\treturn location.protocol + \"//\" + location.host +\n\t\tlocation.pathname + querystring.slice( 0, -1 );\n}\n\nfunction applyUrlParams() {\n\tvar selectedModule,\n\t\tmodulesList = id( \"qunit-modulefilter\" ),\n\t\tfilter = id( \"qunit-filter-input\" ).value;\n\n\tselectedModule = modulesList ?\n\t\tdecodeURIComponent( modulesList.options[ modulesList.selectedIndex ].value ) :\n\t\tundefined;\n\n\twindow.location = setUrl( {\n\t\tmodule: ( selectedModule === \"\" ) ? undefined : selectedModule,\n\t\tfilter: ( filter === \"\" ) ? undefined : filter,\n\n\t\t// Remove moduleId and testId filters\n\t\tmoduleId: undefined,\n\t\ttestId: undefined\n\t} );\n}\n\nfunction toolbarUrlConfigContainer() {\n\tvar urlConfigContainer = document.createElement( \"span\" );\n\n\turlConfigContainer.innerHTML = getUrlConfigHtml();\n\taddClass( urlConfigContainer, \"qunit-url-config\" );\n\n\t// For oldIE support:\n\t// * Add handlers to the individual elements instead of the container\n\t// * Use \"click\" instead of \"change\" for checkboxes\n\taddEvents( urlConfigContainer.getElementsByTagName( \"input\" ), \"click\", toolbarChanged );\n\taddEvents( urlConfigContainer.getElementsByTagName( \"select\" ), \"change\", toolbarChanged );\n\n\treturn urlConfigContainer;\n}\n\nfunction toolbarLooseFilter() {\n\tvar filter = document.createElement( \"form\" ),\n\t\tlabel = document.createElement( \"label\" ),\n\t\tinput = document.createElement( \"input\" ),\n\t\tbutton = document.createElement( \"button\" );\n\n\taddClass( filter, \"qunit-filter\" );\n\n\tlabel.innerHTML = \"Filter: \";\n\n\tinput.type = \"text\";\n\tinput.value = config.filter || \"\";\n\tinput.name = \"filter\";\n\tinput.id = \"qunit-filter-input\";\n\n\tbutton.innerHTML = \"Go\";\n\n\tlabel.appendChild( input );\n\n\tfilter.appendChild( label );\n\tfilter.appendChild( button );\n\taddEvent( filter, \"submit\", function( ev ) {\n\t\tapplyUrlParams();\n\n\t\tif ( ev && ev.preventDefault ) {\n\t\t\tev.preventDefault();\n\t\t}\n\n\t\treturn false;\n\t} );\n\n\treturn filter;\n}\n\nfunction toolbarModuleFilterHtml() {\n\tvar i,\n\t\tmoduleFilterHtml = \"\";\n\n\tif ( !modulesList.length ) {\n\t\treturn false;\n\t}\n\n\tmoduleFilterHtml += \"<label for='qunit-modulefilter'>Module: </label>\" +\n\t\t\"<select id='qunit-modulefilter' name='modulefilter'><option value='' \" +\n\t\t( QUnit.urlParams.module === undefined ? \"selected='selected'\" : \"\" ) +\n\t\t\">< All Modules ></option>\";\n\n\tfor ( i = 0; i < modulesList.length; i++ ) {\n\t\tmoduleFilterHtml += \"<option value='\" +\n\t\t\tescapeText( encodeURIComponent( modulesList[ i ] ) ) + \"' \" +\n\t\t\t( QUnit.urlParams.module === modulesList[ i ] ? \"selected='selected'\" : \"\" ) +\n\t\t\t\">\" + escapeText( modulesList[ i ] ) + \"</option>\";\n\t}\n\tmoduleFilterHtml += \"</select>\";\n\n\treturn moduleFilterHtml;\n}\n\nfunction toolbarModuleFilter() {\n\tvar toolbar = id( \"qunit-testrunner-toolbar\" ),\n\t\tmoduleFilter = document.createElement( \"span\" ),\n\t\tmoduleFilterHtml = toolbarModuleFilterHtml();\n\n\tif ( !toolbar || !moduleFilterHtml ) {\n\t\treturn false;\n\t}\n\n\tmoduleFilter.setAttribute( \"id\", \"qunit-modulefilter-container\" );\n\tmoduleFilter.innerHTML = moduleFilterHtml;\n\n\taddEvent( moduleFilter.lastChild, \"change\", applyUrlParams );\n\n\ttoolbar.appendChild( moduleFilter );\n}\n\nfunction appendToolbar() {\n\tvar toolbar = id( \"qunit-testrunner-toolbar\" );\n\n\tif ( toolbar ) {\n\t\ttoolbar.appendChild( toolbarUrlConfigContainer() );\n\t\ttoolbar.appendChild( toolbarLooseFilter() );\n\t\ttoolbarModuleFilter();\n\t}\n}\n\nfunction appendHeader() {\n\tvar header = id( \"qunit-header\" );\n\n\tif ( header ) {\n\t\theader.innerHTML = \"<a href='\" + escapeText( unfilteredUrl ) + \"'>\" + header.innerHTML +\n\t\t\t\"</a> \";\n\t}\n}\n\nfunction appendBanner() {\n\tvar banner = id( \"qunit-banner\" );\n\n\tif ( banner ) {\n\t\tbanner.className = \"\";\n\t}\n}\n\nfunction appendTestResults() {\n\tvar tests = id( \"qunit-tests\" ),\n\t\tresult = id( \"qunit-testresult\" );\n\n\tif ( result ) {\n\t\tresult.parentNode.removeChild( result );\n\t}\n\n\tif ( tests ) {\n\t\ttests.innerHTML = \"\";\n\t\tresult = document.createElement( \"p\" );\n\t\tresult.id = \"qunit-testresult\";\n\t\tresult.className = \"result\";\n\t\ttests.parentNode.insertBefore( result, tests );\n\t\tresult.innerHTML = \"Running...<br />&#160;\";\n\t}\n}\n\nfunction storeFixture() {\n\tvar fixture = id( \"qunit-fixture\" );\n\tif ( fixture ) {\n\t\tconfig.fixture = fixture.innerHTML;\n\t}\n}\n\nfunction appendFilteredTest() {\n\tvar testId = QUnit.config.testId;\n\tif ( !testId || testId.length <= 0 ) {\n\t\treturn \"\";\n\t}\n\treturn \"<div id='qunit-filteredTest'>Rerunning selected tests: \" +\n\t\tescapeText( testId.join( \", \" ) ) +\n\t\t\" <a id='qunit-clearFilter' href='\" +\n\t\tescapeText( unfilteredUrl ) +\n\t\t\"'>Run all tests</a></div>\";\n}\n\nfunction appendUserAgent() {\n\tvar userAgent = id( \"qunit-userAgent\" );\n\n\tif ( userAgent ) {\n\t\tuserAgent.innerHTML = \"\";\n\t\tuserAgent.appendChild(\n\t\t\tdocument.createTextNode(\n\t\t\t\t\"QUnit \" + QUnit.version + \"; \" + navigator.userAgent\n\t\t\t)\n\t\t);\n\t}\n}\n\nfunction appendInterface() {\n\tvar qunit = id( \"qunit\" );\n\n\tif ( qunit ) {\n\t\tqunit.innerHTML =\n\t\t\t\"<h1 id='qunit-header'>\" + escapeText( document.title ) + \"</h1>\" +\n\t\t\t\"<h2 id='qunit-banner'></h2>\" +\n\t\t\t\"<div id='qunit-testrunner-toolbar'></div>\" +\n\t\t\tappendFilteredTest() +\n\t\t\t\"<h2 id='qunit-userAgent'></h2>\" +\n\t\t\t\"<ol id='qunit-tests'></ol>\";\n\t}\n\n\tappendHeader();\n\tappendBanner();\n\tappendTestResults();\n\tappendUserAgent();\n\tappendToolbar();\n}\n\nfunction appendTestsList( modules ) {\n\tvar i, l, x, z, test, moduleObj;\n\n\tfor ( i = 0, l = modules.length; i < l; i++ ) {\n\t\tmoduleObj = modules[ i ];\n\n\t\tfor ( x = 0, z = moduleObj.tests.length; x < z; x++ ) {\n\t\t\ttest = moduleObj.tests[ x ];\n\n\t\t\tappendTest( test.name, test.testId, moduleObj.name );\n\t\t}\n\t}\n}\n\nfunction appendTest( name, testId, moduleName ) {\n\tvar title, rerunTrigger, testBlock, assertList,\n\t\ttests = id( \"qunit-tests\" );\n\n\tif ( !tests ) {\n\t\treturn;\n\t}\n\n\ttitle = document.createElement( \"strong\" );\n\ttitle.innerHTML = getNameHtml( name, moduleName );\n\n\trerunTrigger = document.createElement( \"a\" );\n\trerunTrigger.innerHTML = \"Rerun\";\n\trerunTrigger.href = setUrl( { testId: testId } );\n\n\ttestBlock = document.createElement( \"li\" );\n\ttestBlock.appendChild( title );\n\ttestBlock.appendChild( rerunTrigger );\n\ttestBlock.id = \"qunit-test-output-\" + testId;\n\n\tassertList = document.createElement( \"ol\" );\n\tassertList.className = \"qunit-assert-list\";\n\n\ttestBlock.appendChild( assertList );\n\n\ttests.appendChild( testBlock );\n}\n\n// HTML Reporter initialization and load\nQUnit.begin( function( details ) {\n\tvar i, moduleObj, tests;\n\n\t// Sort modules by name for the picker\n\tfor ( i = 0; i < details.modules.length; i++ ) {\n\t\tmoduleObj = details.modules[ i ];\n\t\tif ( moduleObj.name ) {\n\t\t\tmodulesList.push( moduleObj.name );\n\t\t}\n\t}\n\tmodulesList.sort( function( a, b ) {\n\t\treturn a.localeCompare( b );\n\t} );\n\n\t// Capture fixture HTML from the page\n\tstoreFixture();\n\n\t// Initialize QUnit elements\n\tappendInterface();\n\tappendTestsList( details.modules );\n\ttests = id( \"qunit-tests\" );\n\tif ( tests && config.hidepassed ) {\n\t\taddClass( tests, \"hidepass\" );\n\t}\n} );\n\nQUnit.done( function( details ) {\n\tvar i, key,\n\t\tbanner = id( \"qunit-banner\" ),\n\t\ttests = id( \"qunit-tests\" ),\n\t\thtml = [\n\t\t\t\"Tests completed in \",\n\t\t\tdetails.runtime,\n\t\t\t\" milliseconds.<br />\",\n\t\t\t\"<span class='passed'>\",\n\t\t\tdetails.passed,\n\t\t\t\"</span> assertions of <span class='total'>\",\n\t\t\tdetails.total,\n\t\t\t\"</span> passed, <span class='failed'>\",\n\t\t\tdetails.failed,\n\t\t\t\"</span> failed.\"\n\t\t].join( \"\" );\n\n\tif ( banner ) {\n\t\tbanner.className = details.failed ? \"qunit-fail\" : \"qunit-pass\";\n\t}\n\n\tif ( tests ) {\n\t\tid( \"qunit-testresult\" ).innerHTML = html;\n\t}\n\n\tif ( config.altertitle && document.title ) {\n\n\t\t// Show ✖ for good, ✔ for bad suite result in title\n\t\t// use escape sequences in case file gets loaded with non-utf-8-charset\n\t\tdocument.title = [\n\t\t\t( details.failed ? \"\\u2716\" : \"\\u2714\" ),\n\t\t\tdocument.title.replace( /^[\\u2714\\u2716] /i, \"\" )\n\t\t].join( \" \" );\n\t}\n\n\t// Clear own sessionStorage items if all tests passed\n\tif ( config.reorder && defined.sessionStorage && details.failed === 0 ) {\n\t\tfor ( i = 0; i < sessionStorage.length; i++ ) {\n\t\t\tkey = sessionStorage.key( i++ );\n\t\t\tif ( key.indexOf( \"qunit-test-\" ) === 0 ) {\n\t\t\t\tsessionStorage.removeItem( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Scroll back to top to show results\n\tif ( config.scrolltop && window.scrollTo ) {\n\t\twindow.scrollTo( 0, 0 );\n\t}\n} );\n\nfunction getNameHtml( name, module ) {\n\tvar nameHtml = \"\";\n\n\tif ( module ) {\n\t\tnameHtml = \"<span class='module-name'>\" + escapeText( module ) + \"</span>: \";\n\t}\n\n\tnameHtml += \"<span class='test-name'>\" + escapeText( name ) + \"</span>\";\n\n\treturn nameHtml;\n}\n\nQUnit.testStart( function( details ) {\n\tvar running, testBlock, bad;\n\n\ttestBlock = id( \"qunit-test-output-\" + details.testId );\n\tif ( testBlock ) {\n\t\ttestBlock.className = \"running\";\n\t} else {\n\n\t\t// Report later registered tests\n\t\tappendTest( details.name, details.testId, details.module );\n\t}\n\n\trunning = id( \"qunit-testresult\" );\n\tif ( running ) {\n\t\tbad = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t+sessionStorage.getItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\n\t\trunning.innerHTML = ( bad ?\n\t\t\t\"Rerunning previously failed test: <br />\" :\n\t\t\t\"Running: <br />\" ) +\n\t\t\tgetNameHtml( details.name, details.module );\n\t}\n\n} );\n\nfunction stripHtml( string ) {\n\n\t// Strip tags, html entity and whitespaces\n\treturn string.replace( /<\\/?[^>]+(>|$)/g, \"\" ).replace( /\\&quot;/g, \"\" ).replace( /\\s+/g, \"\" );\n}\n\nQUnit.log( function( details ) {\n\tvar assertList, assertLi,\n\t\tmessage, expected, actual, diff,\n\t\tshowDiff = false,\n\t\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\n\tif ( !testItem ) {\n\t\treturn;\n\t}\n\n\tmessage = escapeText( details.message ) || ( details.result ? \"okay\" : \"failed\" );\n\tmessage = \"<span class='test-message'>\" + message + \"</span>\";\n\tmessage += \"<span class='runtime'>@ \" + details.runtime + \" ms</span>\";\n\n\t// The pushFailure doesn't provide details.expected\n\t// when it calls, it's implicit to also not show expected and diff stuff\n\t// Also, we need to check details.expected existence, as it can exist and be undefined\n\tif ( !details.result && hasOwn.call( details, \"expected\" ) ) {\n\t\tif ( details.negative ) {\n\t\t\texpected = \"NOT \" + QUnit.dump.parse( details.expected );\n\t\t} else {\n\t\t\texpected = QUnit.dump.parse( details.expected );\n\t\t}\n\n\t\tactual = QUnit.dump.parse( details.actual );\n\t\tmessage += \"<table><tr class='test-expected'><th>Expected: </th><td><pre>\" +\n\t\t\tescapeText( expected ) +\n\t\t\t\"</pre></td></tr>\";\n\n\t\tif ( actual !== expected ) {\n\n\t\t\tmessage += \"<tr class='test-actual'><th>Result: </th><td><pre>\" +\n\t\t\t\tescapeText( actual ) + \"</pre></td></tr>\";\n\n\t\t\t// Don't show diff if actual or expected are booleans\n\t\t\tif ( !( /^(true|false)$/.test( actual ) ) &&\n\t\t\t\t\t!( /^(true|false)$/.test( expected ) ) ) {\n\t\t\t\tdiff = QUnit.diff( expected, actual );\n\t\t\t\tshowDiff = stripHtml( diff ).length !==\n\t\t\t\t\tstripHtml( expected ).length +\n\t\t\t\t\tstripHtml( actual ).length;\n\t\t\t}\n\n\t\t\t// Don't show diff if expected and actual are totally different\n\t\t\tif ( showDiff ) {\n\t\t\t\tmessage += \"<tr class='test-diff'><th>Diff: </th><td><pre>\" +\n\t\t\t\t\tdiff + \"</pre></td></tr>\";\n\t\t\t}\n\t\t} else if ( expected.indexOf( \"[object Array]\" ) !== -1 ||\n\t\t\t\texpected.indexOf( \"[object Object]\" ) !== -1 ) {\n\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\"Diff suppressed as the depth of object is more than current max depth (\" +\n\t\t\t\tQUnit.config.maxDepth + \").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to \" +\n\t\t\t\t\" run with a higher max depth or <a href='\" +\n\t\t\t\tescapeText( setUrl( { maxDepth: -1 } ) ) + \"'>\" +\n\t\t\t\t\"Rerun</a> without max depth.</p></td></tr>\";\n\t\t} else {\n\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\"Diff suppressed as the expected and actual results have an equivalent\" +\n\t\t\t\t\" serialization</td></tr>\";\n\t\t}\n\n\t\tif ( details.source ) {\n\t\t\tmessage += \"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\t\tescapeText( details.source ) + \"</pre></td></tr>\";\n\t\t}\n\n\t\tmessage += \"</table>\";\n\n\t// This occurs when pushFailure is set and we have an extracted stack trace\n\t} else if ( !details.result && details.source ) {\n\t\tmessage += \"<table>\" +\n\t\t\t\"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\tescapeText( details.source ) + \"</pre></td></tr>\" +\n\t\t\t\"</table>\";\n\t}\n\n\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\n\tassertLi = document.createElement( \"li\" );\n\tassertLi.className = details.result ? \"pass\" : \"fail\";\n\tassertLi.innerHTML = message;\n\tassertList.appendChild( assertLi );\n} );\n\nQUnit.testDone( function( details ) {\n\tvar testTitle, time, testItem, assertList,\n\t\tgood, bad, testCounts, skipped, sourceName,\n\t\ttests = id( \"qunit-tests\" );\n\n\tif ( !tests ) {\n\t\treturn;\n\t}\n\n\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\n\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\n\tgood = details.passed;\n\tbad = details.failed;\n\n\t// Store result when possible\n\tif ( config.reorder && defined.sessionStorage ) {\n\t\tif ( bad ) {\n\t\t\tsessionStorage.setItem( \"qunit-test-\" + details.module + \"-\" + details.name, bad );\n\t\t} else {\n\t\t\tsessionStorage.removeItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\t\t}\n\t}\n\n\tif ( bad === 0 ) {\n\n\t\t// Collapse the passing tests\n\t\taddClass( assertList, \"qunit-collapsed\" );\n\t} else if ( bad && config.collapse && !collapseNext ) {\n\n\t\t// Skip collapsing the first failing test\n\t\tcollapseNext = true;\n\t} else {\n\n\t\t// Collapse remaining tests\n\t\taddClass( assertList, \"qunit-collapsed\" );\n\t}\n\n\t// The testItem.firstChild is the test name\n\ttestTitle = testItem.firstChild;\n\n\ttestCounts = bad ?\n\t\t\"<b class='failed'>\" + bad + \"</b>, \" + \"<b class='passed'>\" + good + \"</b>, \" :\n\t\t\"\";\n\n\ttestTitle.innerHTML += \" <b class='counts'>(\" + testCounts +\n\t\tdetails.assertions.length + \")</b>\";\n\n\tif ( details.skipped ) {\n\t\ttestItem.className = \"skipped\";\n\t\tskipped = document.createElement( \"em\" );\n\t\tskipped.className = \"qunit-skipped-label\";\n\t\tskipped.innerHTML = \"skipped\";\n\t\ttestItem.insertBefore( skipped, testTitle );\n\t} else {\n\t\taddEvent( testTitle, \"click\", function() {\n\t\t\ttoggleClass( assertList, \"qunit-collapsed\" );\n\t\t} );\n\n\t\ttestItem.className = bad ? \"fail\" : \"pass\";\n\n\t\ttime = document.createElement( \"span\" );\n\t\ttime.className = \"runtime\";\n\t\ttime.innerHTML = details.runtime + \" ms\";\n\t\ttestItem.insertBefore( time, assertList );\n\t}\n\n\t// Show the source of the test when showing assertions\n\tif ( details.source ) {\n\t\tsourceName = document.createElement( \"p\" );\n\t\tsourceName.innerHTML = \"<strong>Source: </strong>\" + details.source;\n\t\taddClass( sourceName, \"qunit-source\" );\n\t\tif ( bad === 0 ) {\n\t\t\taddClass( sourceName, \"qunit-collapsed\" );\n\t\t}\n\t\taddEvent( testTitle, \"click\", function() {\n\t\t\ttoggleClass( sourceName, \"qunit-collapsed\" );\n\t\t} );\n\t\ttestItem.appendChild( sourceName );\n\t}\n} );\n\n// Avoid readyState issue with phantomjs\n// Ref: #818\nvar notPhantom = ( function( p ) {\n\treturn !( p && p.version && p.version.major > 0 );\n} )( window.phantom );\n\nif ( notPhantom && document.readyState === \"complete\" ) {\n\tQUnit.load();\n} else {\n\taddEvent( window, \"load\", QUnit.load );\n}\n\n/*\n * This file is a modified version of google-diff-match-patch's JavaScript implementation\n * (https://code.google.com/p/google-diff-match-patch/source/browse/trunk/javascript/diff_match_patch_uncompressed.js),\n * modifications are licensed as more fully set forth in LICENSE.txt.\n *\n * The original source of google-diff-match-patch is attributable and licensed as follows:\n *\n * Copyright 2006 Google Inc.\n * https://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * More Info:\n *  https://code.google.com/p/google-diff-match-patch/\n *\n * Usage: QUnit.diff(expected, actual)\n *\n */\nQUnit.diff = ( function() {\n\tfunction DiffMatchPatch() {\n\t}\n\n\t//  DIFF FUNCTIONS\n\n\t/**\n\t * The data structure representing a diff is an array of tuples:\n\t * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n\t * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n\t */\n\tvar DIFF_DELETE = -1,\n\t\tDIFF_INSERT = 1,\n\t\tDIFF_EQUAL = 0;\n\n\t/**\n\t * Find the differences between two texts.  Simplifies the problem by stripping\n\t * any common prefix or suffix off the texts before diffing.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {boolean=} optChecklines Optional speedup flag. If present and false,\n\t *     then don't run a line-level diff first to identify the changed areas.\n\t *     Defaults to true, which does a faster, slightly less optimal diff.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.DiffMain = function( text1, text2, optChecklines ) {\n\t\tvar deadline, checklines, commonlength,\n\t\t\tcommonprefix, commonsuffix, diffs;\n\n\t\t// The diff must be complete in up to 1 second.\n\t\tdeadline = ( new Date() ).getTime() + 1000;\n\n\t\t// Check for null inputs.\n\t\tif ( text1 === null || text2 === null ) {\n\t\t\tthrow new Error( \"Null input. (DiffMain)\" );\n\t\t}\n\n\t\t// Check for equality (speedup).\n\t\tif ( text1 === text2 ) {\n\t\t\tif ( text1 ) {\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_EQUAL, text1 ]\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn [];\n\t\t}\n\n\t\tif ( typeof optChecklines === \"undefined\" ) {\n\t\t\toptChecklines = true;\n\t\t}\n\n\t\tchecklines = optChecklines;\n\n\t\t// Trim off common prefix (speedup).\n\t\tcommonlength = this.diffCommonPrefix( text1, text2 );\n\t\tcommonprefix = text1.substring( 0, commonlength );\n\t\ttext1 = text1.substring( commonlength );\n\t\ttext2 = text2.substring( commonlength );\n\n\t\t// Trim off common suffix (speedup).\n\t\tcommonlength = this.diffCommonSuffix( text1, text2 );\n\t\tcommonsuffix = text1.substring( text1.length - commonlength );\n\t\ttext1 = text1.substring( 0, text1.length - commonlength );\n\t\ttext2 = text2.substring( 0, text2.length - commonlength );\n\n\t\t// Compute the diff on the middle block.\n\t\tdiffs = this.diffCompute( text1, text2, checklines, deadline );\n\n\t\t// Restore the prefix and suffix.\n\t\tif ( commonprefix ) {\n\t\t\tdiffs.unshift( [ DIFF_EQUAL, commonprefix ] );\n\t\t}\n\t\tif ( commonsuffix ) {\n\t\t\tdiffs.push( [ DIFF_EQUAL, commonsuffix ] );\n\t\t}\n\t\tthis.diffCleanupMerge( diffs );\n\t\treturn diffs;\n\t};\n\n\t/**\n\t * Reduce the number of edits by eliminating operationally trivial equalities.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.diffCleanupEfficiency = function( diffs ) {\n\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\tpointer, preIns, preDel, postIns, postDel;\n\t\tchanges = false;\n\t\tequalities = []; // Stack of indices where equalities are found.\n\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t/** @type {?string} */\n\t\tlastequality = null;\n\n\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\tpointer = 0; // Index of current position.\n\n\t\t// Is there an insertion operation before the last equality.\n\t\tpreIns = false;\n\n\t\t// Is there a deletion operation before the last equality.\n\t\tpreDel = false;\n\n\t\t// Is there an insertion operation after the last equality.\n\t\tpostIns = false;\n\n\t\t// Is there a deletion operation after the last equality.\n\t\tpostDel = false;\n\t\twhile ( pointer < diffs.length ) {\n\n\t\t\t// Equality found.\n\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) {\n\t\t\t\tif ( diffs[ pointer ][ 1 ].length < 4 && ( postIns || postDel ) ) {\n\n\t\t\t\t\t// Candidate found.\n\t\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\t\tpreIns = postIns;\n\t\t\t\t\tpreDel = postDel;\n\t\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t\t} else {\n\n\t\t\t\t\t// Not a candidate, and can never become one.\n\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\tlastequality = null;\n\t\t\t\t}\n\t\t\t\tpostIns = postDel = false;\n\n\t\t\t// An insertion or deletion.\n\t\t\t} else {\n\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_DELETE ) {\n\t\t\t\t\tpostDel = true;\n\t\t\t\t} else {\n\t\t\t\t\tpostIns = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Five types to be split:\n\t\t\t\t * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n\t\t\t\t * <ins>A</ins>X<ins>C</ins><del>D</del>\n\t\t\t\t * <ins>A</ins><del>B</del>X<ins>C</ins>\n\t\t\t\t * <ins>A</del>X<ins>C</ins><del>D</del>\n\t\t\t\t * <ins>A</ins><del>B</del>X<del>C</del>\n\t\t\t\t */\n\t\t\t\tif ( lastequality && ( ( preIns && preDel && postIns && postDel ) ||\n\t\t\t\t\t\t( ( lastequality.length < 2 ) &&\n\t\t\t\t\t\t( preIns + preDel + postIns + postDel ) === 3 ) ) ) {\n\n\t\t\t\t\t// Duplicate record.\n\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t);\n\n\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\tequalitiesLength--; // Throw away the equality we just deleted;\n\t\t\t\t\tlastequality = null;\n\t\t\t\t\tif ( preIns && preDel ) {\n\n\t\t\t\t\t\t// No changes made which could affect previous entry, keep going.\n\t\t\t\t\t\tpostIns = postDel = true;\n\t\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tequalitiesLength--; // Throw away the previous equality.\n\t\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\t\t\t\t\t\tpostIns = postDel = false;\n\t\t\t\t\t}\n\t\t\t\t\tchanges = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\n\t\tif ( changes ) {\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t}\n\t};\n\n\t/**\n\t * Convert a diff array into a pretty HTML report.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t * @param {integer} string to be beautified.\n\t * @return {string} HTML representation.\n\t */\n\tDiffMatchPatch.prototype.diffPrettyHtml = function( diffs ) {\n\t\tvar op, data, x,\n\t\t\thtml = [];\n\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\top = diffs[ x ][ 0 ]; // Operation (insert, delete, equal)\n\t\t\tdata = diffs[ x ][ 1 ]; // Text of change.\n\t\t\tswitch ( op ) {\n\t\t\tcase DIFF_INSERT:\n\t\t\t\thtml[ x ] = \"<ins>\" + escapeText( data ) + \"</ins>\";\n\t\t\t\tbreak;\n\t\t\tcase DIFF_DELETE:\n\t\t\t\thtml[ x ] = \"<del>\" + escapeText( data ) + \"</del>\";\n\t\t\t\tbreak;\n\t\t\tcase DIFF_EQUAL:\n\t\t\t\thtml[ x ] = \"<span>\" + escapeText( data ) + \"</span>\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn html.join( \"\" );\n\t};\n\n\t/**\n\t * Determine the common prefix of two strings.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the start of each\n\t *     string.\n\t */\n\tDiffMatchPatch.prototype.diffCommonPrefix = function( text1, text2 ) {\n\t\tvar pointermid, pointermax, pointermin, pointerstart;\n\n\t\t// Quick check for common null cases.\n\t\tif ( !text1 || !text2 || text1.charAt( 0 ) !== text2.charAt( 0 ) ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Binary search.\n\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\tpointermin = 0;\n\t\tpointermax = Math.min( text1.length, text2.length );\n\t\tpointermid = pointermax;\n\t\tpointerstart = 0;\n\t\twhile ( pointermin < pointermid ) {\n\t\t\tif ( text1.substring( pointerstart, pointermid ) ===\n\t\t\t\t\ttext2.substring( pointerstart, pointermid ) ) {\n\t\t\t\tpointermin = pointermid;\n\t\t\t\tpointerstart = pointermin;\n\t\t\t} else {\n\t\t\t\tpointermax = pointermid;\n\t\t\t}\n\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t}\n\t\treturn pointermid;\n\t};\n\n\t/**\n\t * Determine the common suffix of two strings.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the end of each string.\n\t */\n\tDiffMatchPatch.prototype.diffCommonSuffix = function( text1, text2 ) {\n\t\tvar pointermid, pointermax, pointermin, pointerend;\n\n\t\t// Quick check for common null cases.\n\t\tif ( !text1 ||\n\t\t\t\t!text2 ||\n\t\t\t\ttext1.charAt( text1.length - 1 ) !== text2.charAt( text2.length - 1 ) ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Binary search.\n\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\tpointermin = 0;\n\t\tpointermax = Math.min( text1.length, text2.length );\n\t\tpointermid = pointermax;\n\t\tpointerend = 0;\n\t\twhile ( pointermin < pointermid ) {\n\t\t\tif ( text1.substring( text1.length - pointermid, text1.length - pointerend ) ===\n\t\t\t\t\ttext2.substring( text2.length - pointermid, text2.length - pointerend ) ) {\n\t\t\t\tpointermin = pointermid;\n\t\t\t\tpointerend = pointermin;\n\t\t\t} else {\n\t\t\t\tpointermax = pointermid;\n\t\t\t}\n\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t}\n\t\treturn pointermid;\n\t};\n\n\t/**\n\t * Find the differences between two texts.  Assumes that the texts do not\n\t * have any common prefix or suffix.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {boolean} checklines Speedup flag.  If false, then don't run a\n\t *     line-level diff first to identify the changed areas.\n\t *     If true, then run a faster, slightly less optimal diff.\n\t * @param {number} deadline Time when the diff should be complete by.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffCompute = function( text1, text2, checklines, deadline ) {\n\t\tvar diffs, longtext, shorttext, i, hm,\n\t\t\ttext1A, text2A, text1B, text2B,\n\t\t\tmidCommon, diffsA, diffsB;\n\n\t\tif ( !text1 ) {\n\n\t\t\t// Just add some text (speedup).\n\t\t\treturn [\n\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t];\n\t\t}\n\n\t\tif ( !text2 ) {\n\n\t\t\t// Just delete some text (speedup).\n\t\t\treturn [\n\t\t\t\t[ DIFF_DELETE, text1 ]\n\t\t\t];\n\t\t}\n\n\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\ti = longtext.indexOf( shorttext );\n\t\tif ( i !== -1 ) {\n\n\t\t\t// Shorter text is inside the longer text (speedup).\n\t\t\tdiffs = [\n\t\t\t\t[ DIFF_INSERT, longtext.substring( 0, i ) ],\n\t\t\t\t[ DIFF_EQUAL, shorttext ],\n\t\t\t\t[ DIFF_INSERT, longtext.substring( i + shorttext.length ) ]\n\t\t\t];\n\n\t\t\t// Swap insertions for deletions if diff is reversed.\n\t\t\tif ( text1.length > text2.length ) {\n\t\t\t\tdiffs[ 0 ][ 0 ] = diffs[ 2 ][ 0 ] = DIFF_DELETE;\n\t\t\t}\n\t\t\treturn diffs;\n\t\t}\n\n\t\tif ( shorttext.length === 1 ) {\n\n\t\t\t// Single character string.\n\t\t\t// After the previous speedup, the character can't be an equality.\n\t\t\treturn [\n\t\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t];\n\t\t}\n\n\t\t// Check to see if the problem can be split in two.\n\t\thm = this.diffHalfMatch( text1, text2 );\n\t\tif ( hm ) {\n\n\t\t\t// A half-match was found, sort out the return data.\n\t\t\ttext1A = hm[ 0 ];\n\t\t\ttext1B = hm[ 1 ];\n\t\t\ttext2A = hm[ 2 ];\n\t\t\ttext2B = hm[ 3 ];\n\t\t\tmidCommon = hm[ 4 ];\n\n\t\t\t// Send both pairs off for separate processing.\n\t\t\tdiffsA = this.DiffMain( text1A, text2A, checklines, deadline );\n\t\t\tdiffsB = this.DiffMain( text1B, text2B, checklines, deadline );\n\n\t\t\t// Merge the results.\n\t\t\treturn diffsA.concat( [\n\t\t\t\t[ DIFF_EQUAL, midCommon ]\n\t\t\t], diffsB );\n\t\t}\n\n\t\tif ( checklines && text1.length > 100 && text2.length > 100 ) {\n\t\t\treturn this.diffLineMode( text1, text2, deadline );\n\t\t}\n\n\t\treturn this.diffBisect( text1, text2, deadline );\n\t};\n\n\t/**\n\t * Do the two texts share a substring which is at least half the length of the\n\t * longer text?\n\t * This speedup can produce non-minimal diffs.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t *     text1, the suffix of text1, the prefix of text2, the suffix of\n\t *     text2 and the common middle.  Or null if there was no match.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffHalfMatch = function( text1, text2 ) {\n\t\tvar longtext, shorttext, dmp,\n\t\t\ttext1A, text2B, text2A, text1B, midCommon,\n\t\t\thm1, hm2, hm;\n\n\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\tif ( longtext.length < 4 || shorttext.length * 2 < longtext.length ) {\n\t\t\treturn null; // Pointless.\n\t\t}\n\t\tdmp = this; // 'this' becomes 'window' in a closure.\n\n\t\t/**\n\t\t * Does a substring of shorttext exist within longtext such that the substring\n\t\t * is at least half the length of longtext?\n\t\t * Closure, but does not reference any external variables.\n\t\t * @param {string} longtext Longer string.\n\t\t * @param {string} shorttext Shorter string.\n\t\t * @param {number} i Start index of quarter length substring within longtext.\n\t\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t\t *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n\t\t *     of shorttext and the common middle.  Or null if there was no match.\n\t\t * @private\n\t\t */\n\t\tfunction diffHalfMatchI( longtext, shorttext, i ) {\n\t\t\tvar seed, j, bestCommon, prefixLength, suffixLength,\n\t\t\t\tbestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB;\n\n\t\t\t// Start with a 1/4 length substring at position i as a seed.\n\t\t\tseed = longtext.substring( i, i + Math.floor( longtext.length / 4 ) );\n\t\t\tj = -1;\n\t\t\tbestCommon = \"\";\n\t\t\twhile ( ( j = shorttext.indexOf( seed, j + 1 ) ) !== -1 ) {\n\t\t\t\tprefixLength = dmp.diffCommonPrefix( longtext.substring( i ),\n\t\t\t\t\tshorttext.substring( j ) );\n\t\t\t\tsuffixLength = dmp.diffCommonSuffix( longtext.substring( 0, i ),\n\t\t\t\t\tshorttext.substring( 0, j ) );\n\t\t\t\tif ( bestCommon.length < suffixLength + prefixLength ) {\n\t\t\t\t\tbestCommon = shorttext.substring( j - suffixLength, j ) +\n\t\t\t\t\t\tshorttext.substring( j, j + prefixLength );\n\t\t\t\t\tbestLongtextA = longtext.substring( 0, i - suffixLength );\n\t\t\t\t\tbestLongtextB = longtext.substring( i + prefixLength );\n\t\t\t\t\tbestShorttextA = shorttext.substring( 0, j - suffixLength );\n\t\t\t\t\tbestShorttextB = shorttext.substring( j + prefixLength );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( bestCommon.length * 2 >= longtext.length ) {\n\t\t\t\treturn [ bestLongtextA, bestLongtextB,\n\t\t\t\t\tbestShorttextA, bestShorttextB, bestCommon\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// First check if the second quarter is the seed for a half-match.\n\t\thm1 = diffHalfMatchI( longtext, shorttext,\n\t\t\tMath.ceil( longtext.length / 4 ) );\n\n\t\t// Check again based on the third quarter.\n\t\thm2 = diffHalfMatchI( longtext, shorttext,\n\t\t\tMath.ceil( longtext.length / 2 ) );\n\t\tif ( !hm1 && !hm2 ) {\n\t\t\treturn null;\n\t\t} else if ( !hm2 ) {\n\t\t\thm = hm1;\n\t\t} else if ( !hm1 ) {\n\t\t\thm = hm2;\n\t\t} else {\n\n\t\t\t// Both matched.  Select the longest.\n\t\t\thm = hm1[ 4 ].length > hm2[ 4 ].length ? hm1 : hm2;\n\t\t}\n\n\t\t// A half-match was found, sort out the return data.\n\t\ttext1A, text1B, text2A, text2B;\n\t\tif ( text1.length > text2.length ) {\n\t\t\ttext1A = hm[ 0 ];\n\t\t\ttext1B = hm[ 1 ];\n\t\t\ttext2A = hm[ 2 ];\n\t\t\ttext2B = hm[ 3 ];\n\t\t} else {\n\t\t\ttext2A = hm[ 0 ];\n\t\t\ttext2B = hm[ 1 ];\n\t\t\ttext1A = hm[ 2 ];\n\t\t\ttext1B = hm[ 3 ];\n\t\t}\n\t\tmidCommon = hm[ 4 ];\n\t\treturn [ text1A, text1B, text2A, text2B, midCommon ];\n\t};\n\n\t/**\n\t * Do a quick line-level diff on both strings, then rediff the parts for\n\t * greater accuracy.\n\t * This speedup can produce non-minimal diffs.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} deadline Time when the diff should be complete by.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffLineMode = function( text1, text2, deadline ) {\n\t\tvar a, diffs, linearray, pointer, countInsert,\n\t\t\tcountDelete, textInsert, textDelete, j;\n\n\t\t// Scan the text on a line-by-line basis first.\n\t\ta = this.diffLinesToChars( text1, text2 );\n\t\ttext1 = a.chars1;\n\t\ttext2 = a.chars2;\n\t\tlinearray = a.lineArray;\n\n\t\tdiffs = this.DiffMain( text1, text2, false, deadline );\n\n\t\t// Convert the diff back to original text.\n\t\tthis.diffCharsToLines( diffs, linearray );\n\n\t\t// Eliminate freak matches (e.g. blank lines)\n\t\tthis.diffCleanupSemantic( diffs );\n\n\t\t// Rediff any replacement blocks, this time character-by-character.\n\t\t// Add a dummy entry at the end.\n\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] );\n\t\tpointer = 0;\n\t\tcountDelete = 0;\n\t\tcountInsert = 0;\n\t\ttextDelete = \"\";\n\t\ttextInsert = \"\";\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\tcase DIFF_INSERT:\n\t\t\t\tcountInsert++;\n\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\tbreak;\n\t\t\tcase DIFF_DELETE:\n\t\t\t\tcountDelete++;\n\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\tbreak;\n\t\t\tcase DIFF_EQUAL:\n\n\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\tif ( countDelete >= 1 && countInsert >= 1 ) {\n\n\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\tdiffs.splice( pointer - countDelete - countInsert,\n\t\t\t\t\t\tcountDelete + countInsert );\n\t\t\t\t\tpointer = pointer - countDelete - countInsert;\n\t\t\t\t\ta = this.DiffMain( textDelete, textInsert, false, deadline );\n\t\t\t\t\tfor ( j = a.length - 1; j >= 0; j-- ) {\n\t\t\t\t\t\tdiffs.splice( pointer, 0, a[ j ] );\n\t\t\t\t\t}\n\t\t\t\t\tpointer = pointer + a.length;\n\t\t\t\t}\n\t\t\t\tcountInsert = 0;\n\t\t\t\tcountDelete = 0;\n\t\t\t\ttextDelete = \"\";\n\t\t\t\ttextInsert = \"\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\n\t\treturn diffs;\n\t};\n\n\t/**\n\t * Find the 'middle snake' of a diff, split the problem in two\n\t * and return the recursively constructed diff.\n\t * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} deadline Time at which to bail if not yet complete.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffBisect = function( text1, text2, deadline ) {\n\t\tvar text1Length, text2Length, maxD, vOffset, vLength,\n\t\t\tv1, v2, x, delta, front, k1start, k1end, k2start,\n\t\t\tk2end, k2Offset, k1Offset, x1, x2, y1, y2, d, k1, k2;\n\n\t\t// Cache the text lengths to prevent multiple calls.\n\t\ttext1Length = text1.length;\n\t\ttext2Length = text2.length;\n\t\tmaxD = Math.ceil( ( text1Length + text2Length ) / 2 );\n\t\tvOffset = maxD;\n\t\tvLength = 2 * maxD;\n\t\tv1 = new Array( vLength );\n\t\tv2 = new Array( vLength );\n\n\t\t// Setting all elements to -1 is faster in Chrome & Firefox than mixing\n\t\t// integers and undefined.\n\t\tfor ( x = 0; x < vLength; x++ ) {\n\t\t\tv1[ x ] = -1;\n\t\t\tv2[ x ] = -1;\n\t\t}\n\t\tv1[ vOffset + 1 ] = 0;\n\t\tv2[ vOffset + 1 ] = 0;\n\t\tdelta = text1Length - text2Length;\n\n\t\t// If the total number of characters is odd, then the front path will collide\n\t\t// with the reverse path.\n\t\tfront = ( delta % 2 !== 0 );\n\n\t\t// Offsets for start and end of k loop.\n\t\t// Prevents mapping of space beyond the grid.\n\t\tk1start = 0;\n\t\tk1end = 0;\n\t\tk2start = 0;\n\t\tk2end = 0;\n\t\tfor ( d = 0; d < maxD; d++ ) {\n\n\t\t\t// Bail out if deadline is reached.\n\t\t\tif ( ( new Date() ).getTime() > deadline ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Walk the front path one step.\n\t\t\tfor ( k1 = -d + k1start; k1 <= d - k1end; k1 += 2 ) {\n\t\t\t\tk1Offset = vOffset + k1;\n\t\t\t\tif ( k1 === -d || ( k1 !== d && v1[ k1Offset - 1 ] < v1[ k1Offset + 1 ] ) ) {\n\t\t\t\t\tx1 = v1[ k1Offset + 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tx1 = v1[ k1Offset - 1 ] + 1;\n\t\t\t\t}\n\t\t\t\ty1 = x1 - k1;\n\t\t\t\twhile ( x1 < text1Length && y1 < text2Length &&\n\t\t\t\t\ttext1.charAt( x1 ) === text2.charAt( y1 ) ) {\n\t\t\t\t\tx1++;\n\t\t\t\t\ty1++;\n\t\t\t\t}\n\t\t\t\tv1[ k1Offset ] = x1;\n\t\t\t\tif ( x1 > text1Length ) {\n\n\t\t\t\t\t// Ran off the right of the graph.\n\t\t\t\t\tk1end += 2;\n\t\t\t\t} else if ( y1 > text2Length ) {\n\n\t\t\t\t\t// Ran off the bottom of the graph.\n\t\t\t\t\tk1start += 2;\n\t\t\t\t} else if ( front ) {\n\t\t\t\t\tk2Offset = vOffset + delta - k1;\n\t\t\t\t\tif ( k2Offset >= 0 && k2Offset < vLength && v2[ k2Offset ] !== -1 ) {\n\n\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\tx2 = text1Length - v2[ k2Offset ];\n\t\t\t\t\t\tif ( x1 >= x2 ) {\n\n\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Walk the reverse path one step.\n\t\t\tfor ( k2 = -d + k2start; k2 <= d - k2end; k2 += 2 ) {\n\t\t\t\tk2Offset = vOffset + k2;\n\t\t\t\tif ( k2 === -d || ( k2 !== d && v2[ k2Offset - 1 ] < v2[ k2Offset + 1 ] ) ) {\n\t\t\t\t\tx2 = v2[ k2Offset + 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tx2 = v2[ k2Offset - 1 ] + 1;\n\t\t\t\t}\n\t\t\t\ty2 = x2 - k2;\n\t\t\t\twhile ( x2 < text1Length && y2 < text2Length &&\n\t\t\t\t\ttext1.charAt( text1Length - x2 - 1 ) ===\n\t\t\t\t\ttext2.charAt( text2Length - y2 - 1 ) ) {\n\t\t\t\t\tx2++;\n\t\t\t\t\ty2++;\n\t\t\t\t}\n\t\t\t\tv2[ k2Offset ] = x2;\n\t\t\t\tif ( x2 > text1Length ) {\n\n\t\t\t\t\t// Ran off the left of the graph.\n\t\t\t\t\tk2end += 2;\n\t\t\t\t} else if ( y2 > text2Length ) {\n\n\t\t\t\t\t// Ran off the top of the graph.\n\t\t\t\t\tk2start += 2;\n\t\t\t\t} else if ( !front ) {\n\t\t\t\t\tk1Offset = vOffset + delta - k2;\n\t\t\t\t\tif ( k1Offset >= 0 && k1Offset < vLength && v1[ k1Offset ] !== -1 ) {\n\t\t\t\t\t\tx1 = v1[ k1Offset ];\n\t\t\t\t\t\ty1 = vOffset + x1 - k1Offset;\n\n\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\tx2 = text1Length - x2;\n\t\t\t\t\t\tif ( x1 >= x2 ) {\n\n\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Diff took too long and hit the deadline or\n\t\t// number of diffs equals number of characters, no commonality at all.\n\t\treturn [\n\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t[ DIFF_INSERT, text2 ]\n\t\t];\n\t};\n\n\t/**\n\t * Given the location of the 'middle snake', split the diff in two parts\n\t * and recurse.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} x Index of split point in text1.\n\t * @param {number} y Index of split point in text2.\n\t * @param {number} deadline Time at which to bail if not yet complete.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffBisectSplit = function( text1, text2, x, y, deadline ) {\n\t\tvar text1a, text1b, text2a, text2b, diffs, diffsb;\n\t\ttext1a = text1.substring( 0, x );\n\t\ttext2a = text2.substring( 0, y );\n\t\ttext1b = text1.substring( x );\n\t\ttext2b = text2.substring( y );\n\n\t\t// Compute both diffs serially.\n\t\tdiffs = this.DiffMain( text1a, text2a, false, deadline );\n\t\tdiffsb = this.DiffMain( text1b, text2b, false, deadline );\n\n\t\treturn diffs.concat( diffsb );\n\t};\n\n\t/**\n\t * Reduce the number of edits by eliminating semantically trivial equalities.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.diffCleanupSemantic = function( diffs ) {\n\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\tpointer, lengthInsertions2, lengthDeletions2, lengthInsertions1,\n\t\t\tlengthDeletions1, deletion, insertion, overlapLength1, overlapLength2;\n\t\tchanges = false;\n\t\tequalities = []; // Stack of indices where equalities are found.\n\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t/** @type {?string} */\n\t\tlastequality = null;\n\n\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\tpointer = 0; // Index of current position.\n\n\t\t// Number of characters that changed prior to the equality.\n\t\tlengthInsertions1 = 0;\n\t\tlengthDeletions1 = 0;\n\n\t\t// Number of characters that changed after the equality.\n\t\tlengthInsertions2 = 0;\n\t\tlengthDeletions2 = 0;\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) { // Equality found.\n\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\tlengthInsertions1 = lengthInsertions2;\n\t\t\t\tlengthDeletions1 = lengthDeletions2;\n\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t} else { // An insertion or deletion.\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\t\tlengthInsertions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t} else {\n\t\t\t\t\tlengthDeletions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t}\n\n\t\t\t\t// Eliminate an equality that is smaller or equal to the edits on both\n\t\t\t\t// sides of it.\n\t\t\t\tif ( lastequality && ( lastequality.length <=\n\t\t\t\t\t\tMath.max( lengthInsertions1, lengthDeletions1 ) ) &&\n\t\t\t\t\t\t( lastequality.length <= Math.max( lengthInsertions2,\n\t\t\t\t\t\t\tlengthDeletions2 ) ) ) {\n\n\t\t\t\t\t// Duplicate record.\n\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t);\n\n\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\n\t\t\t\t\t// Throw away the equality we just deleted.\n\t\t\t\t\tequalitiesLength--;\n\n\t\t\t\t\t// Throw away the previous equality (it needs to be reevaluated).\n\t\t\t\t\tequalitiesLength--;\n\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\n\t\t\t\t\t// Reset the counters.\n\t\t\t\t\tlengthInsertions1 = 0;\n\t\t\t\t\tlengthDeletions1 = 0;\n\t\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\t\tlastequality = null;\n\t\t\t\t\tchanges = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\n\t\t// Normalize the diff.\n\t\tif ( changes ) {\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t}\n\n\t\t// Find any overlaps between deletions and insertions.\n\t\t// e.g: <del>abcxxx</del><ins>xxxdef</ins>\n\t\t//   -> <del>abc</del>xxx<ins>def</ins>\n\t\t// e.g: <del>xxxabc</del><ins>defxxx</ins>\n\t\t//   -> <ins>def</ins>xxx<del>abc</del>\n\t\t// Only extract an overlap if it is as big as the edit ahead or behind it.\n\t\tpointer = 1;\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_DELETE &&\n\t\t\t\t\tdiffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\tdeletion = diffs[ pointer - 1 ][ 1 ];\n\t\t\t\tinsertion = diffs[ pointer ][ 1 ];\n\t\t\t\toverlapLength1 = this.diffCommonOverlap( deletion, insertion );\n\t\t\t\toverlapLength2 = this.diffCommonOverlap( insertion, deletion );\n\t\t\t\tif ( overlapLength1 >= overlapLength2 ) {\n\t\t\t\t\tif ( overlapLength1 >= deletion.length / 2 ||\n\t\t\t\t\t\t\toverlapLength1 >= insertion.length / 2 ) {\n\n\t\t\t\t\t\t// Overlap found.  Insert an equality and trim the surrounding edits.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_EQUAL, insertion.substring( 0, overlapLength1 ) ]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\tdeletion.substring( 0, deletion.length - overlapLength1 );\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] = insertion.substring( overlapLength1 );\n\t\t\t\t\t\tpointer++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ( overlapLength2 >= deletion.length / 2 ||\n\t\t\t\t\t\t\toverlapLength2 >= insertion.length / 2 ) {\n\n\t\t\t\t\t\t// Reverse overlap found.\n\t\t\t\t\t\t// Insert an equality and swap and trim the surrounding edits.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_EQUAL, deletion.substring( 0, overlapLength2 ) ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\tinsertion.substring( 0, insertion.length - overlapLength2 );\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] = DIFF_DELETE;\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\t\tdeletion.substring( overlapLength2 );\n\t\t\t\t\t\tpointer++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\t};\n\n\t/**\n\t * Determine if the suffix of one string is the prefix of another.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the end of the first\n\t *     string and the start of the second string.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffCommonOverlap = function( text1, text2 ) {\n\t\tvar text1Length, text2Length, textLength,\n\t\t\tbest, length, pattern, found;\n\n\t\t// Cache the text lengths to prevent multiple calls.\n\t\ttext1Length = text1.length;\n\t\ttext2Length = text2.length;\n\n\t\t// Eliminate the null case.\n\t\tif ( text1Length === 0 || text2Length === 0 ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Truncate the longer string.\n\t\tif ( text1Length > text2Length ) {\n\t\t\ttext1 = text1.substring( text1Length - text2Length );\n\t\t} else if ( text1Length < text2Length ) {\n\t\t\ttext2 = text2.substring( 0, text1Length );\n\t\t}\n\t\ttextLength = Math.min( text1Length, text2Length );\n\n\t\t// Quick check for the worst case.\n\t\tif ( text1 === text2 ) {\n\t\t\treturn textLength;\n\t\t}\n\n\t\t// Start by looking for a single character match\n\t\t// and increase length until no match is found.\n\t\t// Performance analysis: https://neil.fraser.name/news/2010/11/04/\n\t\tbest = 0;\n\t\tlength = 1;\n\t\twhile ( true ) {\n\t\t\tpattern = text1.substring( textLength - length );\n\t\t\tfound = text2.indexOf( pattern );\n\t\t\tif ( found === -1 ) {\n\t\t\t\treturn best;\n\t\t\t}\n\t\t\tlength += found;\n\t\t\tif ( found === 0 || text1.substring( textLength - length ) ===\n\t\t\t\t\ttext2.substring( 0, length ) ) {\n\t\t\t\tbest = length;\n\t\t\t\tlength++;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Split two texts into an array of strings.  Reduce the texts to a string of\n\t * hashes where each Unicode character represents one line.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n\t *     An object containing the encoded text1, the encoded text2 and\n\t *     the array of unique strings.\n\t *     The zeroth element of the array of unique strings is intentionally blank.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffLinesToChars = function( text1, text2 ) {\n\t\tvar lineArray, lineHash, chars1, chars2;\n\t\tlineArray = []; // E.g. lineArray[4] === 'Hello\\n'\n\t\tlineHash = {};  // E.g. lineHash['Hello\\n'] === 4\n\n\t\t// '\\x00' is a valid character, but various debuggers don't like it.\n\t\t// So we'll insert a junk entry to avoid generating a null character.\n\t\tlineArray[ 0 ] = \"\";\n\n\t\t/**\n\t\t * Split a text into an array of strings.  Reduce the texts to a string of\n\t\t * hashes where each Unicode character represents one line.\n\t\t * Modifies linearray and linehash through being a closure.\n\t\t * @param {string} text String to encode.\n\t\t * @return {string} Encoded string.\n\t\t * @private\n\t\t */\n\t\tfunction diffLinesToCharsMunge( text ) {\n\t\t\tvar chars, lineStart, lineEnd, lineArrayLength, line;\n\t\t\tchars = \"\";\n\n\t\t\t// Walk the text, pulling out a substring for each line.\n\t\t\t// text.split('\\n') would would temporarily double our memory footprint.\n\t\t\t// Modifying text would create many large strings to garbage collect.\n\t\t\tlineStart = 0;\n\t\t\tlineEnd = -1;\n\n\t\t\t// Keeping our own length variable is faster than looking it up.\n\t\t\tlineArrayLength = lineArray.length;\n\t\t\twhile ( lineEnd < text.length - 1 ) {\n\t\t\t\tlineEnd = text.indexOf( \"\\n\", lineStart );\n\t\t\t\tif ( lineEnd === -1 ) {\n\t\t\t\t\tlineEnd = text.length - 1;\n\t\t\t\t}\n\t\t\t\tline = text.substring( lineStart, lineEnd + 1 );\n\t\t\t\tlineStart = lineEnd + 1;\n\n\t\t\t\tif ( lineHash.hasOwnProperty ? lineHash.hasOwnProperty( line ) :\n\t\t\t\t\t\t\t( lineHash[ line ] !== undefined ) ) {\n\t\t\t\t\tchars += String.fromCharCode( lineHash[ line ] );\n\t\t\t\t} else {\n\t\t\t\t\tchars += String.fromCharCode( lineArrayLength );\n\t\t\t\t\tlineHash[ line ] = lineArrayLength;\n\t\t\t\t\tlineArray[ lineArrayLength++ ] = line;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn chars;\n\t\t}\n\n\t\tchars1 = diffLinesToCharsMunge( text1 );\n\t\tchars2 = diffLinesToCharsMunge( text2 );\n\t\treturn {\n\t\t\tchars1: chars1,\n\t\t\tchars2: chars2,\n\t\t\tlineArray: lineArray\n\t\t};\n\t};\n\n\t/**\n\t * Rehydrate the text in a diff from a string of line hashes to real lines of\n\t * text.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t * @param {!Array.<string>} lineArray Array of unique strings.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffCharsToLines = function( diffs, lineArray ) {\n\t\tvar x, chars, text, y;\n\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\tchars = diffs[ x ][ 1 ];\n\t\t\ttext = [];\n\t\t\tfor ( y = 0; y < chars.length; y++ ) {\n\t\t\t\ttext[ y ] = lineArray[ chars.charCodeAt( y ) ];\n\t\t\t}\n\t\t\tdiffs[ x ][ 1 ] = text.join( \"\" );\n\t\t}\n\t};\n\n\t/**\n\t * Reorder and merge like edit sections.  Merge equalities.\n\t * Any edit section can move as long as it doesn't cross an equality.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.diffCleanupMerge = function( diffs ) {\n\t\tvar pointer, countDelete, countInsert, textInsert, textDelete,\n\t\t\tcommonlength, changes, diffPointer, position;\n\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] ); // Add a dummy entry at the end.\n\t\tpointer = 0;\n\t\tcountDelete = 0;\n\t\tcountInsert = 0;\n\t\ttextDelete = \"\";\n\t\ttextInsert = \"\";\n\t\tcommonlength;\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\tcase DIFF_INSERT:\n\t\t\t\tcountInsert++;\n\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\tpointer++;\n\t\t\t\tbreak;\n\t\t\tcase DIFF_DELETE:\n\t\t\t\tcountDelete++;\n\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\tpointer++;\n\t\t\t\tbreak;\n\t\t\tcase DIFF_EQUAL:\n\n\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\tif ( countDelete + countInsert > 1 ) {\n\t\t\t\t\tif ( countDelete !== 0 && countInsert !== 0 ) {\n\n\t\t\t\t\t\t// Factor out any common prefixes.\n\t\t\t\t\t\tcommonlength = this.diffCommonPrefix( textInsert, textDelete );\n\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\tif ( ( pointer - countDelete - countInsert ) > 0 &&\n\t\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 0 ] ===\n\t\t\t\t\t\t\t\t\tDIFF_EQUAL ) {\n\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 1 ] +=\n\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdiffs.splice( 0, 0, [ DIFF_EQUAL,\n\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength )\n\t\t\t\t\t\t\t\t] );\n\t\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttextInsert = textInsert.substring( commonlength );\n\t\t\t\t\t\t\ttextDelete = textDelete.substring( commonlength );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Factor out any common suffixies.\n\t\t\t\t\t\tcommonlength = this.diffCommonSuffix( textInsert, textDelete );\n\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ] = textInsert.substring( textInsert.length -\n\t\t\t\t\t\t\t\t\tcommonlength ) + diffs[ pointer ][ 1 ];\n\t\t\t\t\t\t\ttextInsert = textInsert.substring( 0, textInsert.length -\n\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t\ttextDelete = textDelete.substring( 0, textDelete.length -\n\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\tif ( countDelete === 0 ) {\n\t\t\t\t\t\tdiffs.splice( pointer - countInsert,\n\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_INSERT, textInsert ] );\n\t\t\t\t\t} else if ( countInsert === 0 ) {\n\t\t\t\t\t\tdiffs.splice( pointer - countDelete,\n\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_DELETE, textDelete ] );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tpointer - countDelete - countInsert,\n\t\t\t\t\t\t\tcountDelete + countInsert,\n\t\t\t\t\t\t\t[ DIFF_DELETE, textDelete ], [ DIFF_INSERT, textInsert ]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tpointer = pointer - countDelete - countInsert +\n\t\t\t\t\t\t( countDelete ? 1 : 0 ) + ( countInsert ? 1 : 0 ) + 1;\n\t\t\t\t} else if ( pointer !== 0 && diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL ) {\n\n\t\t\t\t\t// Merge this equality with the previous one.\n\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer ][ 1 ];\n\t\t\t\t\tdiffs.splice( pointer, 1 );\n\t\t\t\t} else {\n\t\t\t\t\tpointer++;\n\t\t\t\t}\n\t\t\t\tcountInsert = 0;\n\t\t\t\tcountDelete = 0;\n\t\t\t\ttextDelete = \"\";\n\t\t\t\ttextInsert = \"\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( diffs[ diffs.length - 1 ][ 1 ] === \"\" ) {\n\t\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\t\t}\n\n\t\t// Second pass: look for single edits surrounded on both sides by equalities\n\t\t// which can be shifted sideways to eliminate an equality.\n\t\t// e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\t\tchanges = false;\n\t\tpointer = 1;\n\n\t\t// Intentionally ignore the first and last element (don't need checking).\n\t\twhile ( pointer < diffs.length - 1 ) {\n\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL &&\n\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] === DIFF_EQUAL ) {\n\n\t\t\t\tdiffPointer = diffs[ pointer ][ 1 ];\n\t\t\t\tposition = diffPointer.substring(\n\t\t\t\t\tdiffPointer.length - diffs[ pointer - 1 ][ 1 ].length\n\t\t\t\t);\n\n\t\t\t\t// This is a single edit surrounded by equalities.\n\t\t\t\tif ( position === diffs[ pointer - 1 ][ 1 ] ) {\n\n\t\t\t\t\t// Shift the edit over the previous equality.\n\t\t\t\t\tdiffs[ pointer ][ 1 ] = diffs[ pointer - 1 ][ 1 ] +\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( 0, diffs[ pointer ][ 1 ].length -\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ].length );\n\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] + diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\tdiffs.splice( pointer - 1, 1 );\n\t\t\t\t\tchanges = true;\n\t\t\t\t} else if ( diffPointer.substring( 0, diffs[ pointer + 1 ][ 1 ].length ) ===\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] ) {\n\n\t\t\t\t\t// Shift the edit over the next equality.\n\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\tdiffs[ pointer ][ 1 ] =\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( diffs[ pointer + 1 ][ 1 ].length ) +\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\tdiffs.splice( pointer + 1, 1 );\n\t\t\t\t\tchanges = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\n\t\t// If shifts were made, the diff needs reordering and another shift sweep.\n\t\tif ( changes ) {\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t}\n\t};\n\n\treturn function( o, n ) {\n\t\tvar diff, output, text;\n\t\tdiff = new DiffMatchPatch();\n\t\toutput = diff.DiffMain( o, n );\n\t\tdiff.diffCleanupEfficiency( output );\n\t\ttext = diff.diffPrettyHtml( output );\n\n\t\treturn text;\n\t};\n}() );\n\n}() );\n","const PATH_ROOT = [0];\r\nexport const POST_ORDER = \"POST_ORDER\";\r\nexport const PRE_ORDER = \"PRE_ORDER\";\r\nexport const BFS = \"BFS\";\r\nexport const SEP = \".\";\r\n\r\n///// Utility functions\r\n// Cheap cloning, which is enough for our needs : we only clone seeds and empty values, which are generally simple\r\n// objects\r\nfunction clone(a) {\r\n  return a === undefined ? undefined : JSON.parse(JSON.stringify(a))\r\n}\r\n\r\nfunction merge(objA, objB) {\r\n  return Object.assign({}, objA, objB);\r\n}\r\n\r\nfunction times(fn, n) {\r\n  return Array.apply(null, { length: n }).map(Number.call, Number).map(fn)\r\n}\r\n\r\nconst stringify = path => path.join(SEP);\r\n\r\n/**\r\n *\r\n * @param {Map} traversalState\r\n * @param subTree\r\n * @param {Array} subTreeChildren\r\n * @modifies {traversalState}\r\n */\r\nfunction updatePathInTraversalState(traversalState, subTree, subTreeChildren) {\r\n  subTreeChildren.forEach((subTreeChild, index) => {\r\n    const traversalStateParent = traversalState.get(subTree);\r\n    // NOTE : if the path is already set we do not modify it. This allows for post-order traversal, which puts back\r\n    // the parent node into the children nodes to keep the original path for the parent node. So at any time, the\r\n    // `path` value can be trusted to be accurately describing the location of the node in the tree\r\n    const traversalStateChild = traversalState.get(subTreeChild);\r\n    const currentChildPath = traversalStateChild && traversalStateChild.path;\r\n\r\n    traversalState.set(\r\n      subTreeChild,\r\n      merge(traversalStateChild, {\r\n        isAdded: true,\r\n        isVisited: false,\r\n        path: currentChildPath || traversalStateParent.path.concat(index)\r\n      })\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n *\r\n * @param {Map} traversalState\r\n * @param tree\r\n * @modifies {traversalState}\r\n */\r\nfunction updateVisitInTraversalState(traversalState, tree) {\r\n  traversalState.set(\r\n    tree,\r\n    merge(traversalState.get(tree), { isVisited: true })\r\n  );\r\n}\r\n\r\n///// Core API\r\nexport function visitTree(traversalSpecs, tree) {\r\n  const { store, lenses, traverse } = traversalSpecs;\r\n  const { empty: emptyOrEmptyConstructor, add, takeAndRemoveOne, isEmpty } = store;\r\n  const { getChildren } = lenses;\r\n  const { visit, seed: seedOrSeedConstructor } = traverse;\r\n  const traversalState = new Map();\r\n  // NOTE : This allows to have seeds which are non-JSON objects, such as new Map(). We force a new here to make\r\n  // sure we have an object that cannot be modified out of the scope of visitTree and collaborators\r\n  const seed = (typeof seedOrSeedConstructor === 'function') ? new (seedOrSeedConstructor()) : clone(seedOrSeedConstructor);\r\n  const empty = (typeof emptyOrEmptyConstructor === 'function') ? new (emptyOrEmptyConstructor()) : clone(emptyOrEmptyConstructor);\r\n\r\n  let currentStore = empty;\r\n  let visitAcc = seed;\r\n  add([tree], currentStore);\r\n  traversalState.set(tree, { isAdded: true, isVisited: false, path: PATH_ROOT });\r\n\r\n  while ( !isEmpty(currentStore) ) {\r\n    const subTree = takeAndRemoveOne(currentStore);\r\n    const subTreeChildren = getChildren(traversalState, subTree);\r\n\r\n    add(subTreeChildren, currentStore);\r\n    updatePathInTraversalState(traversalState, subTree, subTreeChildren);\r\n    visitAcc = visit(visitAcc, traversalState, subTree);\r\n    updateVisitInTraversalState(traversalState, subTree);\r\n  }\r\n\r\n  // Free the references to the tree/subtrees\r\n  traversalState.clear();\r\n\r\n  return visitAcc;\r\n}\r\n\r\nexport function breadthFirstTraverseTree(lenses, traverse, tree) {\r\n  const { getChildren } = lenses;\r\n  const traversalSpecs = {\r\n    store: {\r\n      empty: [],\r\n      takeAndRemoveOne: store => store.shift(),\r\n      isEmpty: store => store.length === 0,\r\n      add: (subTrees, store) => store.push.apply(store, subTrees)\r\n    },\r\n    lenses: { getChildren: (traversalState, subTree) => getChildren(subTree) },\r\n    traverse\r\n  };\r\n\r\n  return visitTree(traversalSpecs, tree);\r\n}\r\n\r\nexport function preorderTraverseTree(lenses, traverse, tree) {\r\n  const { getChildren } = lenses;\r\n  const traversalSpecs = {\r\n    store: {\r\n      empty: [],\r\n      takeAndRemoveOne: store => store.shift(),\r\n      isEmpty: store => store.length === 0,\r\n      // NOTE : vs. bfs, only `add` changes\r\n      add: (subTrees, store) => store.unshift(...subTrees)\r\n    },\r\n    lenses: { getChildren: (traversalState, subTree) => getChildren(subTree) },\r\n    traverse\r\n  };\r\n\r\n  return visitTree(traversalSpecs, tree);\r\n}\r\n\r\nexport function postOrderTraverseTree(lenses, traverse, tree) {\r\n  const { getChildren } = lenses;\r\n  const isLeaf = (tree, traversalState) => getChildren(tree, traversalState).length === 0;\r\n  const { seed, visit } = traverse;\r\n  const predicate = (tree, traversalState) => traversalState.get(tree).isVisited || isLeaf(tree, traversalState)\r\n  const decoratedLenses = {\r\n    // For post-order, add the parent at the end of the children, that simulates the stack for the recursive function\r\n    // call in the recursive post-order traversal algorithm\r\n    // DOC : getChildren(tree, traversalState) also admit traversalState as argumnets but in second place\r\n    getChildren: (traversalState, tree) =>\r\n      predicate(tree, traversalState)\r\n        ? []\r\n        : getChildren(tree, traversalState).concat([tree])\r\n  };\r\n  const traversalSpecs = {\r\n    store: {\r\n      empty: [],\r\n      takeAndRemoveOne: store => store.shift(),\r\n      isEmpty: store => store.length === 0,\r\n      add: (subTrees, store) => store.unshift(...subTrees)\r\n    },\r\n    lenses: decoratedLenses,\r\n    traverse: {\r\n      seed: seed,\r\n      visit: (result, traversalState, tree) => {\r\n        // Cases :\r\n        // 1. label has been visited already : visit\r\n        // 2. label has not been visited, and there are no children : visit\r\n        // 3. label has not been visited, and there are children : don't visit, will do it later\r\n        return predicate(tree, traversalState)\r\n        ? visit(result, traversalState, tree)\r\n          : result\r\n      }\r\n    }\r\n  };\r\n\r\n  return visitTree(traversalSpecs, tree);\r\n}\r\n\r\n/**\r\n *\r\n * @param {{getChildren : function}} lenses\r\n * @param {{strategy : *, seed : *, visit : function}} traverse\r\n * @param tree\r\n * @returns {*}\r\n */\r\nexport function reduceTree(lenses, traverse, tree) {\r\n  const strategy = traverse.strategy;\r\n  const strategies = {\r\n    BFS: breadthFirstTraverseTree,\r\n    PRE_ORDER: preorderTraverseTree,\r\n    POST_ORDER: postOrderTraverseTree\r\n  };\r\n\r\n  if (!(strategy in strategies)) throw `Unknown tree traversal strategy!`;\r\n\r\n  return strategies[strategy](lenses, traverse, tree);\r\n}\r\n\r\n/**\r\n * Applies a function to every node of a tree. Note that the traversal strategy does matter, as the function to\r\n * apply might perform effects.\r\n * @param {{getChildren : function}} lenses\r\n * @param {{strategy : *, action : function}} traverse\r\n * @param tree\r\n * @returns {*}\r\n */\r\nexport function forEachInTree(lenses, traverse, tree) {\r\n  const { strategy, action } = traverse;\r\n\r\n  const strategies = {\r\n    [BFS]: breadthFirstTraverseTree,\r\n    [PRE_ORDER]: preorderTraverseTree,\r\n    [POST_ORDER]: postOrderTraverseTree\r\n  };\r\n\r\n  if (!(strategy in strategies)) throw `Unknown tree traversal strategy!`;\r\n\r\n  const treeTraveerse = {\r\n    seed: void 0,\r\n    visit: (accumulator, traversalState, tree) => action(tree, traversalState)\r\n  };\r\n  return strategies[strategy](lenses, treeTraveerse, tree);\r\n}\r\n\r\n/**\r\n * Applies a function to every node of a tree, while keeping the tree structure. Note that the traversal strategy in\r\n * that case does not matter, as all nodes will be traversed anyway, and the function to apply is assumed to be a\r\n * pure function.\r\n * @param {{getChildren : function, getLabel : function, constructTree: function}} lenses\r\n * @param {function} mapFn Function to apply to each node.\r\n * @param tree\r\n * @returns {*}\r\n */\r\nexport function mapOverTree(lenses, mapFn, tree) {\r\n  const { getChildren, constructTree, getLabel } = lenses;\r\n  const getChildrenNumber = (tree, traversalState) => getChildren(tree, traversalState).length;\r\n  const stringify = path => path.join(SEP);\r\n  const treeTraverse = {\r\n    seed: () => Map,\r\n    visit: (pathMap, traversalState, tree) => {\r\n      const { path } = traversalState.get(tree);\r\n      // Paths are *stringified* because Map with non-primitive objects uses referential equality\r\n      const mappedLabel = mapFn(getLabel(tree));\r\n      const mappedChildren = times(\r\n        index => pathMap.get(stringify(path.concat(index))), getChildrenNumber(tree, traversalState));\r\n      const mappedTree = constructTree(mappedLabel, mappedChildren);\r\n\r\n      pathMap.set(stringify(path), mappedTree);\r\n\r\n      return pathMap;\r\n    }\r\n  };\r\n  const pathMap = postOrderTraverseTree(lenses, treeTraverse, tree);\r\n  const mappedTree = pathMap.get(stringify(PATH_ROOT));\r\n  pathMap.clear();\r\n\r\n  return mappedTree;\r\n}\r\n\r\n/**\r\n * Returns a tree where all children of nodes which fails a predicate are pruned. Note that the node failing the\r\n * predicate will remain in the tree : only the children will be pruned. If it is wanted to prune also the failing\r\n * node in addition to its children, the `getChildren` function can make use of the second parameter\r\n * `traversalState` to do so\r\n * @param lenses\r\n * @param {function} predicate\r\n * @param tree\r\n * @returns tree\r\n */\r\nexport function pruneWhen(lenses, predicate, tree) {\r\n  // As we need to return a tree, it will be convenient to use mapOverTree\r\n  const { getChildren } = lenses;\r\n  const pruneLenses = merge(lenses, {\r\n    getChildren: (tree, traversalState) => {\r\n      if (predicate(tree, traversalState)) {\r\n        // prune that branch\r\n        return []\r\n      }\r\n      else {\r\n        return getChildren(tree, traversalState)\r\n      }\r\n    }\r\n  });\r\n  const prunedTree = mapOverTree(pruneLenses, x => x, tree);\r\n\r\n  return prunedTree\r\n}\r\n\r\n// Examples of lenses\r\n\r\n// HashedTreeLenses\r\nexport function getHashedTreeLenses(sep) {\r\n  function makeChildCursor(parentCursor, childIndex, sep) {\r\n    return [parentCursor, childIndex].join(sep)\r\n  }\r\n\r\n  return {\r\n    getLabel: tree => {\r\n      const { cursor, hash } = tree;\r\n      return { label: hash[cursor], hash, cursor }\r\n    },\r\n    getChildren: tree => {\r\n      const { cursor, hash } = tree;\r\n      let childIndex = 0;\r\n      let children = [];\r\n\r\n      while ( makeChildCursor(cursor, childIndex, sep) in hash ) {\r\n        children.push({ cursor: makeChildCursor(cursor, childIndex, sep), hash })\r\n        childIndex++;\r\n      }\r\n\r\n      return children\r\n    },\r\n    constructTree: (label, children) => {\r\n      const { label: value, hash, cursor } = label;\r\n\r\n      return {\r\n        cursor: cursor,\r\n        hash: merge(\r\n          children.reduce((acc, child) => merge(acc, child.hash), {}),\r\n          { [cursor]: value }\r\n        )\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nexport function mapOverHashTree(sep, mapFn, obj) {\r\n  const lenses = getHashedTreeLenses(sep);\r\n\r\n  return mapOverTree(lenses, ({ label, hash, cursor }) => ({\r\n    label: mapFn(label), hash, cursor\r\n  }), obj);\r\n}\r\n\r\n// Object as a tree\r\nfunction isLeafLabel(label) {\r\n  return objectTreeLenses.getChildren(label).length === 0\r\n}\r\n\r\nexport const objectTreeLenses = {\r\n  isLeafLabel,\r\n  getLabel: tree => {\r\n    if (typeof tree === 'object' && !Array.isArray(tree) && Object.keys(tree).length === 1) {\r\n      return tree;\r\n    }\r\n    else {\r\n      throw `getLabel > unexpected object tree value`\r\n    }\r\n  },\r\n  getChildren: tree => {\r\n    if (typeof tree === 'object' && !Array.isArray(tree) && Object.keys(tree).length === 1) {\r\n      let value = Object.values(tree)[0];\r\n      if (value && typeof value === 'object' && !Array.isArray(value)) {\r\n        return Object.keys(value).map(prop => ({ [prop]: value[prop] }))\r\n      }\r\n      else {\r\n        return []\r\n      }\r\n    }\r\n    else {\r\n      throw `getChildren > unexpected value`\r\n    }\r\n  },\r\n  constructTree: (label, children) => {\r\n    const labelKey = label && Object.keys(label) && Object.keys(label)[0];\r\n\r\n    return children.length === 0\r\n      ? label\r\n      : {\r\n      [labelKey]: Object.assign.apply(null, children)\r\n    }\r\n  },\r\n};\r\n\r\nexport function mapOverObj({ key: mapKeyfn, leafValue: mapValuefn }, obj) {\r\n  const rootKey = 'root';\r\n  const rootKeyMap = mapKeyfn(rootKey);\r\n\r\n  const mapped =  mapOverTree(objectTreeLenses, (tree) => {\r\n    const key = Object.keys(tree)[0];\r\n    const value = tree[key];\r\n\r\n    return {\r\n      [mapKeyfn(key)]: isLeafLabel(objectTreeLenses.getLabel(tree)) && !isEmptyObject(value)\r\n        ? mapValuefn(value)\r\n        : value\r\n    }\r\n  }, { root: obj });\r\n\r\n  return mapped[rootKeyMap];\r\n}\r\n\r\nexport function traverseObj(traverse, obj){\r\n  const treeObj = {root : obj};\r\n  const {strategy, seed, visit} = traverse;\r\n  const traverseFn = {\r\n    BFS : breadthFirstTraverseTree,\r\n    PRE_ORDER : preorderTraverseTree,\r\n    POST_ORDER: postOrderTraverseTree\r\n  }[strategy] || preorderTraverseTree;\r\n  const decoratedTraverse = {\r\n    seed,\r\n    visit : function visitAllButRoot(visitAcc, traversalState, tree){\r\n      const {path} = traversalState.get(tree);\r\n\r\n      return JSON.stringify(path)=== JSON.stringify(PATH_ROOT)\r\n      ? visitAcc\r\n        : visit(visitAcc, traversalState, tree)\r\n    }\r\n  };\r\n\r\n  const traversedTreeObj = traverseFn(objectTreeLenses, decoratedTraverse, treeObj);\r\n\r\n  return traversedTreeObj\r\n}\r\n\r\nfunction isEmptyObject(obj) {\r\n  return obj && Object.keys(obj).length === 0 && obj.constructor === Object\r\n}\r\n\r\n// Arrays as trees\r\nexport const arrayTreeLenses = {\r\n  getLabel: tree => {\r\n    return Array.isArray(tree) ? tree[0] : tree\r\n  },\r\n  getChildren: tree => {\r\n    return Array.isArray(tree)  ? tree[1] : []\r\n  },\r\n  constructTree: (label, children) => {\r\n    return children && Array.isArray(children) && children.length > 0 ? [label, children] : label\r\n  },\r\n}\r\n\r\n// Conversion\r\nexport function switchTreeDataStructure(originLenses, targetLenses, tree) {\r\n  const { getLabel, getChildren } = originLenses;\r\n  const { constructTree } = targetLenses;\r\n  const getChildrenNumber = (tree, traversalState) => getChildren(tree, traversalState).length;\r\n\r\n  const traverse = {\r\n    seed: () => Map,\r\n    visit: (pathMap, traversalState, tree) => {\r\n      const { path } = traversalState.get(tree);\r\n      const label = getLabel(tree);\r\n      const children = times(\r\n        index => pathMap.get(stringify(path.concat(index))),\r\n        getChildrenNumber(tree, traversalState)\r\n      );\r\n      pathMap.set(stringify(path), constructTree(label, children));\r\n\r\n      return pathMap;\r\n    }\r\n  };\r\n\r\n  const newTreeStruct = postOrderTraverseTree(originLenses, traverse, tree);\r\n  return newTreeStruct.get(stringify(PATH_ROOT));\r\n}\r\n","// Test reduceTree, foreachInTree, and mapOverTree!!\r\n\r\nimport * as QUnit from \"qunitjs\";\r\nimport {\r\n  arrayTreeLenses, BFS, breadthFirstTraverseTree, forEachInTree, getHashedTreeLenses, mapOverHashTree, mapOverObj,\r\n  mapOverTree, objectTreeLenses, POST_ORDER, postOrderTraverseTree, preorderTraverseTree, pruneWhen, reduceTree,\r\n  switchTreeDataStructure, traverseObj\r\n} from \"../\";\r\nimport { PRE_ORDER } from \"../index\"\r\n\r\nfunction merge(objA, objB) {\r\n  return Object.assign({}, objA, objB);\r\n}\r\n\r\nfunction addPrefix(prefix) {\r\n  return function (str) {\r\n    return prefix + str;\r\n  };\r\n}\r\n\r\nQUnit.dump.maxDepth = 10;\r\n\r\nconst tree = {\r\n  label: \"root\",\r\n  children: [\r\n    { label: \"left\" },\r\n    {\r\n      label: \"middle\",\r\n      children: [{ label: \"midleft\" }, { label: \"midright\" }]\r\n    },\r\n    { label: \"right\" }\r\n  ]\r\n};\r\nconst lenses = {\r\n  getLabel: tree => tree.label,\r\n  getChildren: tree => tree.children || [],\r\n  constructTree: (label, children) => ({ label, children })\r\n};\r\nconst traverse = {\r\n  seed: [],\r\n  visit: (result, traversalState, tree) => {\r\n    result.push(lenses.getLabel(tree));\r\n    return result;\r\n  }\r\n};\r\n\r\nQUnit.module(\"Testing tree traversal\", {});\r\n\r\nQUnit.test(\"main case - preorderTraverseTree\", function exec_test(assert) {\r\n  const actual = preorderTraverseTree(lenses, traverse, tree);\r\n  const expected = [\r\n    \"root\",\r\n    \"left\",\r\n    \"middle\",\r\n    \"midleft\",\r\n    \"midright\",\r\n    \"right\"\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - breadthFirstTraverseTree\", function exec_test(assert) {\r\n  const actual = breadthFirstTraverseTree(lenses, traverse, tree);\r\n  const expected = [\r\n    \"root\",\r\n    \"left\",\r\n    \"middle\",\r\n    \"right\",\r\n    \"midleft\",\r\n    \"midright\"\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - postOrderTraverseTree\", function exec_test(assert) {\r\n  const actual = postOrderTraverseTree(lenses, traverse, tree);\r\n  const expected = [\r\n    \"left\",\r\n    \"midleft\",\r\n    \"midright\",\r\n    \"middle\",\r\n    \"right\",\r\n    \"root\"\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - reduceTree\", function exec_test(assert) {\r\n  const reduceTraverse = merge(traverse, { \"strategy\": BFS });\r\n  const actual = reduceTree(lenses, reduceTraverse, tree);\r\n  const expected = [\r\n    \"root\",\r\n    \"left\",\r\n    \"middle\",\r\n    \"right\",\r\n    \"midleft\",\r\n    \"midright\"\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - forEachInTree\", function exec_test(assert) {\r\n  const traces = [];\r\n  const traverse = {\r\n    strategy: POST_ORDER,\r\n    action: (tree, traversalState) => {\r\n      traces.push(traversalState.get(tree))\r\n      traces.push(tree.label)\r\n    }\r\n  }\r\n\r\n  forEachInTree(lenses, traverse, tree);\r\n  const actual = traces;\r\n  const expected = [\r\n    {\r\n      \"isAdded\": true,\r\n      \"isVisited\": false,\r\n      \"path\": [\r\n        0,\r\n        0\r\n      ]\r\n    },\r\n    \"left\",\r\n    {\r\n      \"isAdded\": true,\r\n      \"isVisited\": false,\r\n      \"path\": [\r\n        0,\r\n        1,\r\n        0\r\n      ]\r\n    },\r\n    \"midleft\",\r\n    {\r\n      \"isAdded\": true,\r\n      \"isVisited\": false,\r\n      \"path\": [\r\n        0,\r\n        1,\r\n        1\r\n      ]\r\n    },\r\n    \"midright\",\r\n    {\r\n      \"isAdded\": true,\r\n      \"isVisited\": true,\r\n      \"path\": [\r\n        0,\r\n        1\r\n      ]\r\n    },\r\n    \"middle\",\r\n    {\r\n      \"isAdded\": true,\r\n      \"isVisited\": false,\r\n      \"path\": [\r\n        0,\r\n        2\r\n      ]\r\n    },\r\n    \"right\",\r\n    {\r\n      \"isAdded\": true,\r\n      \"isVisited\": true,\r\n      \"path\": [\r\n        0\r\n      ]\r\n    },\r\n    \"root\"\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - mapOverTree\", function exec_test(assert) {\r\n  const getChildren = tree => tree.children || [];\r\n  const getLabel = tree => tree.label || '';\r\n  const constructTree = (label, trees) => ({ label, children: trees });\r\n  const mapFn = label => addPrefix('Map:')(label)\r\n  const lenses = { getChildren, constructTree, getLabel };\r\n\r\n  const actual = mapOverTree(lenses, mapFn, tree);\r\n  const expected = {\r\n    \"children\": [\r\n      {\r\n        \"children\": [],\r\n        \"label\": \"Map:left\"\r\n      },\r\n      {\r\n        \"children\": [\r\n          {\r\n            \"children\": [],\r\n            \"label\": \"Map:midleft\"\r\n          },\r\n          {\r\n            \"children\": [],\r\n            \"label\": \"Map:midright\"\r\n          }\r\n        ],\r\n        \"label\": \"Map:middle\"\r\n      },\r\n      {\r\n        \"children\": [],\r\n        \"label\": \"Map:right\"\r\n      }\r\n    ],\r\n    \"label\": \"Map:root\"\r\n  };\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - pruneWhen\", function exec_test(assert) {\r\n  const getChildren = tree => tree.children || [];\r\n  const getLabel = tree => tree.label || '';\r\n  const constructTree = (label, trees) => ({ label, children: trees });\r\n  const predicate = (tree, traversalState) => traversalState.get(tree).path.length > 1;\r\n  const lenses = { getChildren, constructTree, getLabel };\r\n\r\n  const actual = pruneWhen(lenses, predicate, tree);\r\n  const expected = {\r\n    \"children\": [\r\n      {\r\n        \"children\": [],\r\n        \"label\": \"left\"\r\n      },\r\n      {\r\n        \"children\": [],\r\n        \"label\": \"middle\"\r\n      },\r\n      {\r\n        \"children\": [],\r\n        \"label\": \"right\"\r\n      }\r\n    ],\r\n    \"label\": \"root\"\r\n  };\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.module(\"Testing tree traversal with objects\", {});\r\n\r\nQUnit.test(\"main case - object traversal - map over\", function exec_test(assert) {\r\n  const obj = {\r\n      \"combinatorName\": undefined,\r\n      \"componentName\": \"sinkUpdatingComponent\",\r\n      \"emits\": {\r\n        \"identifier\": \"a_circular_behavior_source\",\r\n        \"notification\": {\r\n          \"kind\": \"N\",\r\n          \"value\": {\r\n            \"key\": \"value\"\r\n          }\r\n        },\r\n        \"type\": 0\r\n      },\r\n      \"id\": 3,\r\n      \"logType\": \"runtime\",\r\n      \"path\": [\r\n        0,\r\n        0,\r\n        0,\r\n        2\r\n      ],\r\n      \"settings\": {}\r\n    };\r\n\r\n  const actual = mapOverObj({ key: key => 'K' + key, leafValue: value => 'K' + value }, obj);\r\n  const expected = {\r\n    \"KcombinatorName\": \"Kundefined\",\r\n    \"KcomponentName\": \"KsinkUpdatingComponent\",\r\n    \"Kemits\": {\r\n      \"Kidentifier\": \"Ka_circular_behavior_source\",\r\n      \"Knotification\": {\r\n        \"Kkind\": \"KN\",\r\n        \"Kvalue\": {\r\n          \"Kkey\": \"Kvalue\"\r\n        }\r\n      },\r\n      \"Ktype\": \"K0\"\r\n    },\r\n    \"Kid\": \"K3\",\r\n    \"KlogType\": \"Kruntime\",\r\n    \"Kpath\": \"K0,0,0,2\",\r\n    \"Ksettings\": {}\r\n  };\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - object traversal - BFS traverse\", function exec_test(assert) {\r\n  const lenses = objectTreeLenses;\r\n  const traverse = {\r\n    strategy: BFS,\r\n    seed: [],\r\n    visit: (result, traversalState, tree) => {\r\n      const label = lenses.getLabel(tree);\r\n      result.push(label);\r\n\r\n      return result;\r\n    }\r\n  };\r\n\r\n  const obj = {\r\n    \"combinatorName\": undefined,\r\n    \"componentName\": \"sinkUpdatingComponent\",\r\n    \"emits\": {\r\n      \"identifier\": \"a_circular_behavior_source\",\r\n      \"notification\": {\r\n        \"kind\": \"N\",\r\n        \"value\": {\r\n          \"key\": \"value\"\r\n        }\r\n      },\r\n      \"type\": 0\r\n    },\r\n    \"id\": 3,\r\n    \"logType\": \"runtime\",\r\n    \"path\": [\r\n      0,\r\n      0,\r\n      0,\r\n      2\r\n    ],\r\n    \"settings\": {}\r\n  }\r\n  const actual = traverseObj(traverse, obj);\r\n\r\n  const expected = [\r\n    {\r\n      \"combinatorName\": undefined\r\n    },\r\n    {\r\n      \"componentName\": \"sinkUpdatingComponent\"\r\n    },\r\n    {\r\n      \"emits\": {\r\n        \"identifier\": \"a_circular_behavior_source\",\r\n        \"notification\": {\r\n          \"kind\": \"N\",\r\n          \"value\": {\r\n            \"key\": \"value\"\r\n          }\r\n        },\r\n        \"type\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": 3\r\n    },\r\n    {\r\n      \"logType\": \"runtime\"\r\n    },\r\n    {\r\n      \"path\": [\r\n        0,\r\n        0,\r\n        0,\r\n        2\r\n      ]\r\n    },\r\n    {\r\n      \"settings\": {}\r\n    },\r\n    {\r\n      \"identifier\": \"a_circular_behavior_source\"\r\n    },\r\n    {\r\n      \"notification\": {\r\n        \"kind\": \"N\",\r\n        \"value\": {\r\n          \"key\": \"value\"\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"type\": 0\r\n    },\r\n    {\r\n      \"kind\": \"N\"\r\n    },\r\n    {\r\n      \"value\": {\r\n        \"key\": \"value\"\r\n      }\r\n    },\r\n    {\r\n      \"key\": \"value\"\r\n    }\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - object traversal - preorder traverse\", function exec_test(assert) {\r\n  const lenses = objectTreeLenses;\r\n  const traverse = {\r\n    strategy: PRE_ORDER,\r\n    seed: [],\r\n    visit: (result, traversalState, tree) => {\r\n      const label = lenses.getLabel(tree);\r\n      result.push(label);\r\n\r\n      return result;\r\n    }\r\n  };\r\n\r\n  const obj = {\r\n    \"combinatorName\": undefined,\r\n    \"componentName\": \"sinkUpdatingComponent\",\r\n    \"emits\": {\r\n      \"identifier\": \"a_circular_behavior_source\",\r\n      \"notification\": {\r\n        \"kind\": \"N\",\r\n        \"value\": {\r\n          \"key\": \"value\"\r\n        }\r\n      },\r\n      \"type\": 0\r\n    },\r\n    \"id\": 3,\r\n    \"logType\": \"runtime\",\r\n    \"path\": [\r\n      0,\r\n      0,\r\n      0,\r\n      2\r\n    ],\r\n    \"settings\": {}\r\n  }\r\n  const actual = traverseObj(traverse, obj);\r\n\r\n  const expected = [\r\n    {\r\n      \"combinatorName\": undefined\r\n    },\r\n    {\r\n      \"componentName\": \"sinkUpdatingComponent\"\r\n    },\r\n    {\r\n      \"emits\": {\r\n        \"identifier\": \"a_circular_behavior_source\",\r\n        \"notification\": {\r\n          \"kind\": \"N\",\r\n          \"value\": {\r\n            \"key\": \"value\"\r\n          }\r\n        },\r\n        \"type\": 0\r\n      }\r\n    },\r\n    {\r\n      \"identifier\": \"a_circular_behavior_source\"\r\n    },\r\n    {\r\n      \"notification\": {\r\n        \"kind\": \"N\",\r\n        \"value\": {\r\n          \"key\": \"value\"\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"kind\": \"N\"\r\n    },\r\n    {\r\n      \"value\": {\r\n        \"key\": \"value\"\r\n      }\r\n    },\r\n    {\r\n      \"key\": \"value\"\r\n    },\r\n    {\r\n      \"type\": 0\r\n    },\r\n    {\r\n      \"id\": 3\r\n    },\r\n    {\r\n      \"logType\": \"runtime\"\r\n    },\r\n    {\r\n      \"path\": [\r\n        0,\r\n        0,\r\n        0,\r\n        2\r\n      ]\r\n    },\r\n    {\r\n      \"settings\": {}\r\n    }\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - object traversal - post-order traverse\", function exec_test(assert) {\r\n  const lenses = objectTreeLenses;\r\n  const traverse = {\r\n    strategy: POST_ORDER,\r\n    seed: [],\r\n    visit: (result, traversalState, tree) => {\r\n      const label = lenses.getLabel(tree);\r\n      result.push(label);\r\n\r\n      return result;\r\n    }\r\n  };\r\n\r\n  const obj = {\r\n    \"combinatorName\": undefined,\r\n    \"componentName\": \"sinkUpdatingComponent\",\r\n    \"emits\": {\r\n      \"identifier\": \"a_circular_behavior_source\",\r\n      \"notification\": {\r\n        \"kind\": \"N\",\r\n        \"value\": {\r\n          \"key\": \"value\"\r\n        }\r\n      },\r\n      \"type\": 0\r\n    },\r\n    \"id\": 3,\r\n    \"logType\": \"runtime\",\r\n    \"path\": [\r\n      0,\r\n      0,\r\n      0,\r\n      2\r\n    ],\r\n    \"settings\": {}\r\n  }\r\n  const actual = traverseObj(traverse, obj);\r\n\r\n  const expected = [\r\n    {\r\n      \"combinatorName\": undefined\r\n    },\r\n    {\r\n      \"componentName\": \"sinkUpdatingComponent\"\r\n    },\r\n    {\r\n      \"identifier\": \"a_circular_behavior_source\"\r\n    },\r\n    {\r\n      \"kind\": \"N\"\r\n    },\r\n    {\r\n      \"key\": \"value\"\r\n    },\r\n    {\r\n      \"value\": {\r\n        \"key\": \"value\"\r\n      }\r\n    },\r\n    {\r\n      \"notification\": {\r\n        \"kind\": \"N\",\r\n        \"value\": {\r\n          \"key\": \"value\"\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"type\": 0\r\n    },\r\n    {\r\n      \"emits\": {\r\n        \"identifier\": \"a_circular_behavior_source\",\r\n        \"notification\": {\r\n          \"kind\": \"N\",\r\n          \"value\": {\r\n            \"key\": \"value\"\r\n          }\r\n        },\r\n        \"type\": 0\r\n      }\r\n    },\r\n    {\r\n      \"id\": 3\r\n    },\r\n    {\r\n      \"logType\": \"runtime\"\r\n    },\r\n    {\r\n      \"path\": [\r\n        0,\r\n        0,\r\n        0,\r\n        2\r\n      ]\r\n    },\r\n    {\r\n      \"settings\": {}\r\n    }\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - hashed-tree traversal - traverse\", function exec_test(assert) {\r\n  const traces = [];\r\n  const lenses = getHashedTreeLenses('.');\r\n\r\n  const traverse = {\r\n    seed: [],\r\n    visit: (result, traversalState, obj) => {\r\n      result.push(traversalState.get(obj).path + `: ${obj.hash[obj.cursor]}`);\r\n\r\n      return result\r\n    }\r\n  }\r\n\r\n  function traverseHashedTree(lenses, traverse, obj) {\r\n    return breadthFirstTraverseTree(lenses, traverse, obj)\r\n  }\r\n\r\n  const hash = {\r\n    \"0\": \"root\",\r\n    \"0.0\": \"combinatorName\",\r\n    \"0.1\": \"componentName\",\r\n    \"0.2\": \"emits\",\r\n    \"0.3\": \"id\",\r\n    \"0.4\": \"logType\",\r\n    \"0.5\": \"path\",\r\n    \"0.6\": \"settings\",\r\n    \"0.2.0\": \"identifier\",\r\n    \"0.2.1\": \"notification\",\r\n    \"0.2.2\": \"type\",\r\n    \"0.2.1.0\": \"kind\",\r\n    \"0.2.1.1\": \"value\",\r\n    \"0.2.1.1.0\": \"key\"\r\n  };\r\n  const obj = {\r\n      cursor: \"0\",\r\n      hash\r\n    }\r\n  ;\r\n\r\n  const actual = traverseHashedTree(lenses, traverse, obj);\r\n  const expected = [\r\n    \"0: root\",\r\n    \"0,0: combinatorName\",\r\n    \"0,1: componentName\",\r\n    \"0,2: emits\",\r\n    \"0,3: id\",\r\n    \"0,4: logType\",\r\n    \"0,5: path\",\r\n    \"0,6: settings\",\r\n    \"0,2,0: identifier\",\r\n    \"0,2,1: notification\",\r\n    \"0,2,2: type\",\r\n    \"0,2,1,0: kind\",\r\n    \"0,2,1,1: value\",\r\n    \"0,2,1,1,0: key\"\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - hashed-tree traversal - map over\", function exec_test(assert) {\r\n  const hash = {\r\n    \"0\": \"root\",\r\n    \"0.0\": \"combinatorName\",\r\n    \"0.1\": \"componentName\",\r\n    \"0.2\": \"emits\",\r\n    \"0.3\": \"id\",\r\n    \"0.2.0\": \"identifier\",\r\n    \"0.2.1\": \"notification\",\r\n    \"0.2.2\": \"type\",\r\n    \"0.2.1.0\": \"kind\",\r\n    \"0.2.1.1\": \"value\",\r\n    \"0.2.1.1.0\": \"key\"\r\n  };\r\n  const hash_orig = {\r\n    \"0\": \"root\",\r\n    \"0.0\": \"combinatorName\",\r\n    \"0.1\": \"componentName\",\r\n    \"0.2\": \"emits\",\r\n    \"0.3\": \"id\",\r\n    \"0.2.0\": \"identifier\",\r\n    \"0.2.1\": \"notification\",\r\n    \"0.2.2\": \"type\",\r\n    \"0.2.1.0\": \"kind\",\r\n    \"0.2.1.1\": \"value\",\r\n    \"0.2.1.1.0\": \"key\"\r\n  };\r\n  const obj = {\r\n      cursor: \"0\",\r\n      hash\r\n    }\r\n  ;\r\n\r\n  const actual = mapOverHashTree('.', label => 'M-' + label, obj);\r\n  const expected = {\r\n    \"cursor\": \"0\",\r\n    \"hash\": {\r\n      \"0\": \"M-root\",\r\n      \"0.0\": \"M-combinatorName\",\r\n      \"0.1\": \"M-componentName\",\r\n      \"0.2\": \"M-emits\",\r\n      \"0.2.0\": \"M-identifier\",\r\n      \"0.2.1\": \"M-notification\",\r\n      \"0.2.1.0\": \"M-kind\",\r\n      \"0.2.1.1\": \"M-value\",\r\n      \"0.2.1.1.0\": \"M-key\",\r\n      \"0.2.2\": \"M-type\",\r\n      \"0.3\": \"M-id\",\r\n    }\r\n  };\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n  assert.deepEqual(hash, hash_orig, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - array tree traversal - traverse\", function exec_test(assert) {\r\n  const lenses = arrayTreeLenses;\r\n\r\n  const traverse = {\r\n    seed: [],\r\n    visit: (result, traversalState, tree) => {\r\n      const path = traversalState.get(tree).path;\r\n      const parentLabel = lenses.getLabel(tree);\r\n      const children = lenses.getChildren(tree);\r\n      const graphNodes = children.map(child => {\r\n        return {\r\n          data: {\r\n            id: [lenses.getLabel(child), path.join('.')].join('.'),\r\n            label: lenses.getLabel(child),\r\n            parent: parentLabel\r\n          }\r\n        }\r\n      });\r\n\r\n      return result.concat(graphNodes)\r\n    }\r\n  }\r\n\r\n  const arrayTree = ['root', [\r\n    ['no_cd_loaded', [\r\n      \"cd_drawer_closed\",\r\n      \"cd_drawer_open\",\r\n      \"closing_cd_drawer\"\r\n    ]],\r\n    ['cd_loaded', [\r\n      [\"cd_loaded_group\", [\r\n        [\"cd_paused_group\", [\r\n          \"time_and_track_fields_not_blank\",\r\n          \"time_and_track_fields_blank\"\r\n        ]],\r\n        \"cd_playing\",\r\n        \"cd_stopped\"\r\n      ]],\r\n      \"stepping_forwards\",\r\n      \"stepping_backwards\"\r\n    ]]\r\n  ]];\r\n\r\n  const actual = breadthFirstTraverseTree(lenses, traverse, arrayTree);\r\n  const expected = [\r\n    {\r\n      \"data\": {\r\n        \"id\": \"no_cd_loaded.0\",\r\n        \"label\": \"no_cd_loaded\",\r\n        \"parent\": \"root\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_loaded.0\",\r\n        \"label\": \"cd_loaded\",\r\n        \"parent\": \"root\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_drawer_closed.0.0\",\r\n        \"label\": \"cd_drawer_closed\",\r\n        \"parent\": \"no_cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_drawer_open.0.0\",\r\n        \"label\": \"cd_drawer_open\",\r\n        \"parent\": \"no_cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"closing_cd_drawer.0.0\",\r\n        \"label\": \"closing_cd_drawer\",\r\n        \"parent\": \"no_cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_loaded_group.0.1\",\r\n        \"label\": \"cd_loaded_group\",\r\n        \"parent\": \"cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"stepping_forwards.0.1\",\r\n        \"label\": \"stepping_forwards\",\r\n        \"parent\": \"cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"stepping_backwards.0.1\",\r\n        \"label\": \"stepping_backwards\",\r\n        \"parent\": \"cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_paused_group.0.1.0\",\r\n        \"label\": \"cd_paused_group\",\r\n        \"parent\": \"cd_loaded_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_playing.0.1.0\",\r\n        \"label\": \"cd_playing\",\r\n        \"parent\": \"cd_loaded_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_stopped.0.1.0\",\r\n        \"label\": \"cd_stopped\",\r\n        \"parent\": \"cd_loaded_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"time_and_track_fields_not_blank.0.1.0.0\",\r\n        \"label\": \"time_and_track_fields_not_blank\",\r\n        \"parent\": \"cd_paused_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"time_and_track_fields_blank.0.1.0.0\",\r\n        \"label\": \"time_and_track_fields_blank\",\r\n        \"parent\": \"cd_paused_group\"\r\n      }\r\n    }\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - switching tree data structure - from label tree to array tree\", function exec_test(assert) {\r\n  const actual = switchTreeDataStructure(lenses, arrayTreeLenses, tree);\r\n\r\n  const expected = [\r\n    \"root\",\r\n    [\r\n      \"left\",\r\n      [\r\n        \"middle\",\r\n        [\r\n          \"midleft\",\r\n          \"midright\"\r\n        ]\r\n      ],\r\n      \"right\"\r\n    ]\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - array tree traversal - postorder traversal\", function exec_test(assert) {\r\n  const lenses = arrayTreeLenses;\r\n\r\n  const traverse = {\r\n    seed: [],\r\n    visit: (result, traversalState, tree) => {\r\n      const path = traversalState.get(tree).path;\r\n      const label = lenses.getLabel(tree);\r\n      const children = lenses.getChildren(tree);\r\n\r\n      return result.concat({ path, label, children })\r\n    }\r\n  }\r\n\r\n  const arrayTree = [\r\n    \"root\",\r\n    [\r\n      \"left\",\r\n      [\r\n        \"middle\",\r\n        [\r\n          \"midleft\",\r\n          \"midright\"\r\n        ]\r\n      ],\r\n      \"right\"\r\n    ]\r\n  ];\r\n\r\n  const actual = postOrderTraverseTree(lenses, traverse, arrayTree);\r\n  const expected =\r\n    [\r\n      {\r\n        \"children\": [],\r\n        \"label\": \"left\",\r\n        \"path\": [\r\n          0,\r\n          0\r\n        ]\r\n      },\r\n      {\r\n        \"children\": [],\r\n        \"label\": \"midleft\",\r\n        \"path\": [\r\n          0,\r\n          1,\r\n          0\r\n        ]\r\n      },\r\n      {\r\n        \"children\": [],\r\n        \"label\": \"midright\",\r\n        \"path\": [\r\n          0,\r\n          1,\r\n          1\r\n        ]\r\n      },\r\n      {\r\n        \"children\": [\r\n          \"midleft\",\r\n          \"midright\"\r\n        ],\r\n        \"label\": \"middle\",\r\n        \"path\": [\r\n          0,\r\n          1\r\n        ]\r\n      },\r\n      {\r\n        \"children\": [],\r\n        \"label\": \"right\",\r\n        \"path\": [\r\n          0,\r\n          2\r\n        ]\r\n      },\r\n      {\r\n        \"children\": [\r\n          \"left\",\r\n          [\r\n            \"middle\",\r\n            [\r\n              \"midleft\",\r\n              \"midright\"\r\n            ]\r\n          ],\r\n          \"right\"\r\n        ],\r\n        \"label\": \"root\",\r\n        \"path\": [\r\n          0\r\n        ]\r\n      }\r\n    ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - switching tree data structure - from array tree to label tree\", function exec_test(assert) {\r\n  const tree = [\r\n    \"root\",\r\n    [\r\n      \"left\",\r\n      [\r\n        \"middle\",\r\n        [\r\n          \"midleft\",\r\n          \"midright\"\r\n        ]\r\n      ],\r\n      \"right\"\r\n    ]\r\n  ];\r\n  const actual = switchTreeDataStructure(arrayTreeLenses, lenses, tree);\r\n\r\n  const expected =\r\n    {\r\n      \"children\": [\r\n        {\r\n          \"children\": [],\r\n          \"label\": \"left\"\r\n        },\r\n        {\r\n          \"children\": [\r\n            {\r\n              \"children\": [],\r\n              \"label\": \"midleft\"\r\n            },\r\n            {\r\n              \"children\": [],\r\n              \"label\": \"midright\"\r\n            }\r\n          ],\r\n          \"label\": \"middle\"\r\n        },\r\n        {\r\n          \"children\": [],\r\n          \"label\": \"right\"\r\n        }\r\n      ],\r\n      \"label\": \"root\"\r\n    };\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.module(\"Edge cases - identiical values\", {});\r\n\r\nQUnit.test(\"main case - preorderTraverseTree - label tree - identical labels\", function exec_test(assert) {\r\n  const tree = {\r\n    label: \"root\",\r\n    children: [\r\n      { label: \"same\" },\r\n      {\r\n        label: \"same\",\r\n        children: [{ label: \"midleft\" }, { label: \"midright\" }]\r\n      },\r\n      { label: \"same\" }\r\n    ]\r\n  };\r\n\r\n  const actual = preorderTraverseTree(lenses, traverse, tree);\r\n  const expected = [\r\n    \"root\",\r\n    \"same\",\r\n    \"same\",\r\n    \"midleft\",\r\n    \"midright\",\r\n    \"same\"\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - postorderTraverseTree - label tree - identical labels\", function exec_test(assert) {\r\n  const tree = {\r\n    label: \"root\",\r\n    children: [\r\n      { label: \"same\" },\r\n      {\r\n        label: \"same\",\r\n        children: [{ label: \"midleft\" }, { label: \"midright\" }]\r\n      },\r\n      { label: \"same\" }\r\n    ]\r\n  };\r\n\r\n  const actual = postOrderTraverseTree(lenses, traverse, tree);\r\n  const expected = [\r\n    \"same\",\r\n    \"midleft\",\r\n    \"midright\",\r\n    \"same\",\r\n    \"same\",\r\n    \"root\"\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - bfsOrderTraverseTree - label tree - identical labels\", function exec_test(assert) {\r\n  const tree = {\r\n    label: \"root\",\r\n    children: [\r\n      { label: \"same\" },\r\n      {\r\n        label: \"same\",\r\n        children: [{ label: \"midleft\" }, { label: \"midright\" }]\r\n      },\r\n      { label: \"same\" }\r\n    ]\r\n  };\r\n\r\n  const actual = breadthFirstTraverseTree(lenses, traverse, tree);\r\n  const expected = [\r\n    \"root\",\r\n    \"same\",\r\n    \"same\",\r\n    \"same\",\r\n    \"midleft\",\r\n    \"midright\"\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - preorder array tree traversal - traverse - identical labels\", function exec_test(assert) {\r\n  const lenses = arrayTreeLenses;\r\n\r\n  const traverse = {\r\n    seed: [],\r\n    visit: (result, traversalState, tree) => {\r\n      const path = traversalState.get(tree).path;\r\n      const parentLabel = lenses.getLabel(tree);\r\n      const children = lenses.getChildren(tree);\r\n      const graphNodes = children.map(child => {\r\n        return {\r\n          data: {\r\n            id: [lenses.getLabel(child), path.join('.')].join('.'),\r\n            label: lenses.getLabel(child),\r\n            parent: parentLabel\r\n          }\r\n        }\r\n      });\r\n\r\n      return result.concat(graphNodes)\r\n    }\r\n  }\r\n\r\n  const arrayTree = ['root', [\r\n    ['no_cd_loaded', [\r\n      \"cd_drawer_closed\",\r\n      \"cd_drawer_closed\",\r\n      \"cd_drawer_closed\"\r\n    ]],\r\n    ['cd_loaded', [\r\n      [\"cd_loaded_group\", [\r\n        [\"cd_paused_group\", [\r\n          \"time_and_track_fields_not_blank\",\r\n          \"time_and_track_fields_blank\"\r\n        ]],\r\n        \"cd_playing\",\r\n        \"cd_stopped\"\r\n      ]],\r\n      \"stepping_forwards\",\r\n      \"stepping_backwards\"\r\n    ]]\r\n  ]];\r\n\r\n  const actual = breadthFirstTraverseTree(lenses, traverse, arrayTree);\r\n  const expected = [\r\n    {\r\n      \"data\": {\r\n        \"id\": \"no_cd_loaded.0\",\r\n        \"label\": \"no_cd_loaded\",\r\n        \"parent\": \"root\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_loaded.0\",\r\n        \"label\": \"cd_loaded\",\r\n        \"parent\": \"root\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_drawer_closed.0.0\",\r\n        \"label\": \"cd_drawer_closed\",\r\n        \"parent\": \"no_cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_drawer_closed.0.0\",\r\n        \"label\": \"cd_drawer_closed\",\r\n        \"parent\": \"no_cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_drawer_closed.0.0\",\r\n        \"label\": \"cd_drawer_closed\",\r\n        \"parent\": \"no_cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_loaded_group.0.1\",\r\n        \"label\": \"cd_loaded_group\",\r\n        \"parent\": \"cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"stepping_forwards.0.1\",\r\n        \"label\": \"stepping_forwards\",\r\n        \"parent\": \"cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"stepping_backwards.0.1\",\r\n        \"label\": \"stepping_backwards\",\r\n        \"parent\": \"cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_paused_group.0.1.0\",\r\n        \"label\": \"cd_paused_group\",\r\n        \"parent\": \"cd_loaded_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_playing.0.1.0\",\r\n        \"label\": \"cd_playing\",\r\n        \"parent\": \"cd_loaded_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_stopped.0.1.0\",\r\n        \"label\": \"cd_stopped\",\r\n        \"parent\": \"cd_loaded_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"time_and_track_fields_not_blank.0.1.0.0\",\r\n        \"label\": \"time_and_track_fields_not_blank\",\r\n        \"parent\": \"cd_paused_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"time_and_track_fields_blank.0.1.0.0\",\r\n        \"label\": \"time_and_track_fields_blank\",\r\n        \"parent\": \"cd_paused_group\"\r\n      }\r\n    }\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n\r\nQUnit.test(\"main case - postorder tree traversal - traverse - identical labels\", function exec_test(assert) {\r\n  const lenses = arrayTreeLenses;\r\n\r\n  const traverse = {\r\n    seed: [],\r\n    visit: (result, traversalState, tree) => {\r\n      const path = traversalState.get(tree).path;\r\n      const parentLabel = lenses.getLabel(tree);\r\n      const children = lenses.getChildren(tree);\r\n      const graphNodes = children.map(child => {\r\n        return {\r\n          data: {\r\n            id: [lenses.getLabel(child), path.join('.')].join('.'),\r\n            label: lenses.getLabel(child),\r\n            parent: parentLabel\r\n          }\r\n        }\r\n      });\r\n\r\n      return result.concat(graphNodes)\r\n    }\r\n  }\r\n\r\n  const arrayTree = ['root', [\r\n    ['no_cd_loaded', [\r\n      \"cd_drawer_closed\",\r\n      \"cd_drawer_closed\",\r\n      \"cd_drawer_closed\"\r\n    ]],\r\n    ['cd_drawer_closed', [\r\n      [\"cd_loaded_group\", [\r\n        [\"cd_paused_group\", [\r\n          \"time_and_track_fields_not_blank\",\r\n          \"time_and_track_fields_blank\"\r\n        ]],\r\n        \"cd_playing\",\r\n        \"cd_stopped\"\r\n      ]],\r\n      \"stepping_forwards\",\r\n      \"stepping_backwards\"\r\n    ]]\r\n  ]];\r\n\r\n  const actual = postOrderTraverseTree(lenses, traverse, arrayTree);\r\n  const expected = [\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_drawer_closed.0.0\",\r\n        \"label\": \"cd_drawer_closed\",\r\n        \"parent\": \"no_cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_drawer_closed.0.0\",\r\n        \"label\": \"cd_drawer_closed\",\r\n        \"parent\": \"no_cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_drawer_closed.0.0\",\r\n        \"label\": \"cd_drawer_closed\",\r\n        \"parent\": \"no_cd_loaded\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"time_and_track_fields_not_blank.0.1.0.0\",\r\n        \"label\": \"time_and_track_fields_not_blank\",\r\n        \"parent\": \"cd_paused_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"time_and_track_fields_blank.0.1.0.0\",\r\n        \"label\": \"time_and_track_fields_blank\",\r\n        \"parent\": \"cd_paused_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_paused_group.0.1.0\",\r\n        \"label\": \"cd_paused_group\",\r\n        \"parent\": \"cd_loaded_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_playing.0.1.0\",\r\n        \"label\": \"cd_playing\",\r\n        \"parent\": \"cd_loaded_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_stopped.0.1.0\",\r\n        \"label\": \"cd_stopped\",\r\n        \"parent\": \"cd_loaded_group\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_loaded_group.0.1\",\r\n        \"label\": \"cd_loaded_group\",\r\n        \"parent\": \"cd_drawer_closed\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"stepping_forwards.0.1\",\r\n        \"label\": \"stepping_forwards\",\r\n        \"parent\": \"cd_drawer_closed\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"stepping_backwards.0.1\",\r\n        \"label\": \"stepping_backwards\",\r\n        \"parent\": \"cd_drawer_closed\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"no_cd_loaded.0\",\r\n        \"label\": \"no_cd_loaded\",\r\n        \"parent\": \"root\"\r\n      }\r\n    },\r\n    {\r\n      \"data\": {\r\n        \"id\": \"cd_drawer_closed.0\",\r\n        \"label\": \"cd_drawer_closed\",\r\n        \"parent\": \"root\"\r\n      }\r\n    }\r\n  ];\r\n\r\n  assert.deepEqual(actual, expected, `Works!`);\r\n});\r\n"]}