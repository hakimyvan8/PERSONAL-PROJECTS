{"version":3,"file":"rosetree.umd.js","sources":["../index.js"],"sourcesContent":["const PATH_ROOT = [0];\r\nexport const POST_ORDER = \"POST_ORDER\";\r\nexport const PRE_ORDER = \"PRE_ORDER\";\r\nexport const BFS = \"BFS\";\r\nexport const SEP = \".\";\r\n\r\n///// Utility functions\r\n// Cheap cloning, which is enough for our needs : we only clone seeds and empty values, which are generally simple\r\n// objects\r\nfunction clone(a) {\r\n  return a === undefined ? undefined : JSON.parse(JSON.stringify(a))\r\n}\r\n\r\nfunction merge(objA, objB) {\r\n  return Object.assign({}, objA, objB);\r\n}\r\n\r\nfunction times(fn, n) {\r\n  return Array.apply(null, { length: n }).map(Number.call, Number).map(fn)\r\n}\r\n\r\nconst stringify = path => path.join(SEP);\r\n\r\n/**\r\n *\r\n * @param {Map} traversalState\r\n * @param subTree\r\n * @param {Array} subTreeChildren\r\n * @modifies {traversalState}\r\n */\r\nfunction updatePathInTraversalState(traversalState, subTree, subTreeChildren) {\r\n  subTreeChildren.forEach((subTreeChild, index) => {\r\n    const traversalStateParent = traversalState.get(subTree);\r\n    // NOTE : if the path is already set we do not modify it. This allows for post-order traversal, which puts back\r\n    // the parent node into the children nodes to keep the original path for the parent node. So at any time, the\r\n    // `path` value can be trusted to be accurately describing the location of the node in the tree\r\n    const traversalStateChild = traversalState.get(subTreeChild);\r\n    const currentChildPath = traversalStateChild && traversalStateChild.path;\r\n\r\n    traversalState.set(\r\n      subTreeChild,\r\n      merge(traversalStateChild, {\r\n        isAdded: true,\r\n        isVisited: false,\r\n        path: currentChildPath || traversalStateParent.path.concat(index)\r\n      })\r\n    );\r\n  });\r\n}\r\n\r\n/**\r\n *\r\n * @param {Map} traversalState\r\n * @param tree\r\n * @modifies {traversalState}\r\n */\r\nfunction updateVisitInTraversalState(traversalState, tree) {\r\n  traversalState.set(\r\n    tree,\r\n    merge(traversalState.get(tree), { isVisited: true })\r\n  );\r\n}\r\n\r\n///// Core API\r\nexport function visitTree(traversalSpecs, tree) {\r\n  const { store, lenses, traverse } = traversalSpecs;\r\n  const { empty: emptyOrEmptyConstructor, add, takeAndRemoveOne, isEmpty } = store;\r\n  const { getChildren } = lenses;\r\n  const { visit, seed: seedOrSeedConstructor } = traverse;\r\n  const traversalState = new Map();\r\n  // NOTE : This allows to have seeds which are non-JSON objects, such as new Map(). We force a new here to make\r\n  // sure we have an object that cannot be modified out of the scope of visitTree and collaborators\r\n  const seed = (typeof seedOrSeedConstructor === 'function') ? new (seedOrSeedConstructor()) : clone(seedOrSeedConstructor);\r\n  const empty = (typeof emptyOrEmptyConstructor === 'function') ? new (emptyOrEmptyConstructor()) : clone(emptyOrEmptyConstructor);\r\n\r\n  let currentStore = empty;\r\n  let visitAcc = seed;\r\n  add([tree], currentStore);\r\n  traversalState.set(tree, { isAdded: true, isVisited: false, path: PATH_ROOT });\r\n\r\n  while ( !isEmpty(currentStore) ) {\r\n    const subTree = takeAndRemoveOne(currentStore);\r\n    const subTreeChildren = getChildren(traversalState, subTree);\r\n\r\n    add(subTreeChildren, currentStore);\r\n    updatePathInTraversalState(traversalState, subTree, subTreeChildren);\r\n    visitAcc = visit(visitAcc, traversalState, subTree);\r\n    updateVisitInTraversalState(traversalState, subTree);\r\n  }\r\n\r\n  // Free the references to the tree/subtrees\r\n  traversalState.clear();\r\n\r\n  return visitAcc;\r\n}\r\n\r\nexport function breadthFirstTraverseTree(lenses, traverse, tree) {\r\n  const { getChildren } = lenses;\r\n  const traversalSpecs = {\r\n    store: {\r\n      empty: [],\r\n      takeAndRemoveOne: store => store.shift(),\r\n      isEmpty: store => store.length === 0,\r\n      add: (subTrees, store) => store.push.apply(store, subTrees)\r\n    },\r\n    lenses: { getChildren: (traversalState, subTree) => getChildren(subTree) },\r\n    traverse\r\n  };\r\n\r\n  return visitTree(traversalSpecs, tree);\r\n}\r\n\r\nexport function preorderTraverseTree(lenses, traverse, tree) {\r\n  const { getChildren } = lenses;\r\n  const traversalSpecs = {\r\n    store: {\r\n      empty: [],\r\n      takeAndRemoveOne: store => store.shift(),\r\n      isEmpty: store => store.length === 0,\r\n      // NOTE : vs. bfs, only `add` changes\r\n      add: (subTrees, store) => store.unshift(...subTrees)\r\n    },\r\n    lenses: { getChildren: (traversalState, subTree) => getChildren(subTree) },\r\n    traverse\r\n  };\r\n\r\n  return visitTree(traversalSpecs, tree);\r\n}\r\n\r\nexport function postOrderTraverseTree(lenses, traverse, tree) {\r\n  const { getChildren } = lenses;\r\n  const isLeaf = (tree, traversalState) => getChildren(tree, traversalState).length === 0;\r\n  const { seed, visit } = traverse;\r\n  const predicate = (tree, traversalState) => traversalState.get(tree).isVisited || isLeaf(tree, traversalState)\r\n  const decoratedLenses = {\r\n    // For post-order, add the parent at the end of the children, that simulates the stack for the recursive function\r\n    // call in the recursive post-order traversal algorithm\r\n    // DOC : getChildren(tree, traversalState) also admit traversalState as argumnets but in second place\r\n    getChildren: (traversalState, tree) =>\r\n      predicate(tree, traversalState)\r\n        ? []\r\n        : getChildren(tree, traversalState).concat([tree])\r\n  };\r\n  const traversalSpecs = {\r\n    store: {\r\n      empty: [],\r\n      takeAndRemoveOne: store => store.shift(),\r\n      isEmpty: store => store.length === 0,\r\n      add: (subTrees, store) => store.unshift(...subTrees)\r\n    },\r\n    lenses: decoratedLenses,\r\n    traverse: {\r\n      seed: seed,\r\n      visit: (result, traversalState, tree) => {\r\n        // Cases :\r\n        // 1. label has been visited already : visit\r\n        // 2. label has not been visited, and there are no children : visit\r\n        // 3. label has not been visited, and there are children : don't visit, will do it later\r\n        return predicate(tree, traversalState)\r\n        ? visit(result, traversalState, tree)\r\n          : result\r\n      }\r\n    }\r\n  };\r\n\r\n  return visitTree(traversalSpecs, tree);\r\n}\r\n\r\n/**\r\n *\r\n * @param {{getChildren : function}} lenses\r\n * @param {{strategy : *, seed : *, visit : function}} traverse\r\n * @param tree\r\n * @returns {*}\r\n */\r\nexport function reduceTree(lenses, traverse, tree) {\r\n  const strategy = traverse.strategy;\r\n  const strategies = {\r\n    BFS: breadthFirstTraverseTree,\r\n    PRE_ORDER: preorderTraverseTree,\r\n    POST_ORDER: postOrderTraverseTree\r\n  };\r\n\r\n  if (!(strategy in strategies)) throw `Unknown tree traversal strategy!`;\r\n\r\n  return strategies[strategy](lenses, traverse, tree);\r\n}\r\n\r\n/**\r\n * Applies a function to every node of a tree. Note that the traversal strategy does matter, as the function to\r\n * apply might perform effects.\r\n * @param {{getChildren : function}} lenses\r\n * @param {{strategy : *, action : function}} traverse\r\n * @param tree\r\n * @returns {*}\r\n */\r\nexport function forEachInTree(lenses, traverse, tree) {\r\n  const { strategy, action } = traverse;\r\n\r\n  const strategies = {\r\n    [BFS]: breadthFirstTraverseTree,\r\n    [PRE_ORDER]: preorderTraverseTree,\r\n    [POST_ORDER]: postOrderTraverseTree\r\n  };\r\n\r\n  if (!(strategy in strategies)) throw `Unknown tree traversal strategy!`;\r\n\r\n  const treeTraveerse = {\r\n    seed: void 0,\r\n    visit: (accumulator, traversalState, tree) => action(tree, traversalState)\r\n  };\r\n  return strategies[strategy](lenses, treeTraveerse, tree);\r\n}\r\n\r\n/**\r\n * Applies a function to every node of a tree, while keeping the tree structure. Note that the traversal strategy in\r\n * that case does not matter, as all nodes will be traversed anyway, and the function to apply is assumed to be a\r\n * pure function.\r\n * @param {{getChildren : function, getLabel : function, constructTree: function}} lenses\r\n * @param {function} mapFn Function to apply to each node.\r\n * @param tree\r\n * @returns {*}\r\n */\r\nexport function mapOverTree(lenses, mapFn, tree) {\r\n  const { getChildren, constructTree, getLabel } = lenses;\r\n  const getChildrenNumber = (tree, traversalState) => getChildren(tree, traversalState).length;\r\n  const stringify = path => path.join(SEP);\r\n  const treeTraverse = {\r\n    seed: () => Map,\r\n    visit: (pathMap, traversalState, tree) => {\r\n      const { path } = traversalState.get(tree);\r\n      // Paths are *stringified* because Map with non-primitive objects uses referential equality\r\n      const mappedLabel = mapFn(getLabel(tree));\r\n      const mappedChildren = times(\r\n        index => pathMap.get(stringify(path.concat(index))), getChildrenNumber(tree, traversalState));\r\n      const mappedTree = constructTree(mappedLabel, mappedChildren);\r\n\r\n      pathMap.set(stringify(path), mappedTree);\r\n\r\n      return pathMap;\r\n    }\r\n  };\r\n  const pathMap = postOrderTraverseTree(lenses, treeTraverse, tree);\r\n  const mappedTree = pathMap.get(stringify(PATH_ROOT));\r\n  pathMap.clear();\r\n\r\n  return mappedTree;\r\n}\r\n\r\n/**\r\n * Returns a tree where all children of nodes which fails a predicate are pruned. Note that the node failing the\r\n * predicate will remain in the tree : only the children will be pruned. If it is wanted to prune also the failing\r\n * node in addition to its children, the `getChildren` function can make use of the second parameter\r\n * `traversalState` to do so\r\n * @param lenses\r\n * @param {function} predicate\r\n * @param tree\r\n * @returns tree\r\n */\r\nexport function pruneWhen(lenses, predicate, tree) {\r\n  // As we need to return a tree, it will be convenient to use mapOverTree\r\n  const { getChildren } = lenses;\r\n  const pruneLenses = merge(lenses, {\r\n    getChildren: (tree, traversalState) => {\r\n      if (predicate(tree, traversalState)) {\r\n        // prune that branch\r\n        return []\r\n      }\r\n      else {\r\n        return getChildren(tree, traversalState)\r\n      }\r\n    }\r\n  });\r\n  const prunedTree = mapOverTree(pruneLenses, x => x, tree);\r\n\r\n  return prunedTree\r\n}\r\n\r\n// Examples of lenses\r\n\r\n// HashedTreeLenses\r\nexport function getHashedTreeLenses(sep) {\r\n  function makeChildCursor(parentCursor, childIndex, sep) {\r\n    return [parentCursor, childIndex].join(sep)\r\n  }\r\n\r\n  return {\r\n    getLabel: tree => {\r\n      const { cursor, hash } = tree;\r\n      return { label: hash[cursor], hash, cursor }\r\n    },\r\n    getChildren: tree => {\r\n      const { cursor, hash } = tree;\r\n      let childIndex = 0;\r\n      let children = [];\r\n\r\n      while ( makeChildCursor(cursor, childIndex, sep) in hash ) {\r\n        children.push({ cursor: makeChildCursor(cursor, childIndex, sep), hash })\r\n        childIndex++;\r\n      }\r\n\r\n      return children\r\n    },\r\n    constructTree: (label, children) => {\r\n      const { label: value, hash, cursor } = label;\r\n\r\n      return {\r\n        cursor: cursor,\r\n        hash: merge(\r\n          children.reduce((acc, child) => merge(acc, child.hash), {}),\r\n          { [cursor]: value }\r\n        )\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\nexport function mapOverHashTree(sep, mapFn, obj) {\r\n  const lenses = getHashedTreeLenses(sep);\r\n\r\n  return mapOverTree(lenses, ({ label, hash, cursor }) => ({\r\n    label: mapFn(label), hash, cursor\r\n  }), obj);\r\n}\r\n\r\n// Object as a tree\r\nfunction isLeafLabel(label) {\r\n  return objectTreeLenses.getChildren(label).length === 0\r\n}\r\n\r\nexport const objectTreeLenses = {\r\n  isLeafLabel,\r\n  getLabel: tree => {\r\n    if (typeof tree === 'object' && !Array.isArray(tree) && Object.keys(tree).length === 1) {\r\n      return tree;\r\n    }\r\n    else {\r\n      throw `getLabel > unexpected object tree value`\r\n    }\r\n  },\r\n  getChildren: tree => {\r\n    if (typeof tree === 'object' && !Array.isArray(tree) && Object.keys(tree).length === 1) {\r\n      let value = Object.values(tree)[0];\r\n      if (value && typeof value === 'object' && !Array.isArray(value)) {\r\n        return Object.keys(value).map(prop => ({ [prop]: value[prop] }))\r\n      }\r\n      else {\r\n        return []\r\n      }\r\n    }\r\n    else {\r\n      throw `getChildren > unexpected value`\r\n    }\r\n  },\r\n  constructTree: (label, children) => {\r\n    const labelKey = label && Object.keys(label) && Object.keys(label)[0];\r\n\r\n    return children.length === 0\r\n      ? label\r\n      : {\r\n      [labelKey]: Object.assign.apply(null, children)\r\n    }\r\n  },\r\n};\r\n\r\nexport function mapOverObj({ key: mapKeyfn, leafValue: mapValuefn }, obj) {\r\n  const rootKey = 'root';\r\n  const rootKeyMap = mapKeyfn(rootKey);\r\n\r\n  const mapped =  mapOverTree(objectTreeLenses, (tree) => {\r\n    const key = Object.keys(tree)[0];\r\n    const value = tree[key];\r\n\r\n    return {\r\n      [mapKeyfn(key)]: isLeafLabel(objectTreeLenses.getLabel(tree)) && !isEmptyObject(value)\r\n        ? mapValuefn(value)\r\n        : value\r\n    }\r\n  }, { root: obj });\r\n\r\n  return mapped[rootKeyMap];\r\n}\r\n\r\nexport function traverseObj(traverse, obj){\r\n  const treeObj = {root : obj};\r\n  const {strategy, seed, visit} = traverse;\r\n  const traverseFn = {\r\n    BFS : breadthFirstTraverseTree,\r\n    PRE_ORDER : preorderTraverseTree,\r\n    POST_ORDER: postOrderTraverseTree\r\n  }[strategy] || preorderTraverseTree;\r\n  const decoratedTraverse = {\r\n    seed,\r\n    visit : function visitAllButRoot(visitAcc, traversalState, tree){\r\n      const {path} = traversalState.get(tree);\r\n\r\n      return JSON.stringify(path)=== JSON.stringify(PATH_ROOT)\r\n      ? visitAcc\r\n        : visit(visitAcc, traversalState, tree)\r\n    }\r\n  };\r\n\r\n  const traversedTreeObj = traverseFn(objectTreeLenses, decoratedTraverse, treeObj);\r\n\r\n  return traversedTreeObj\r\n}\r\n\r\nfunction isEmptyObject(obj) {\r\n  return obj && Object.keys(obj).length === 0 && obj.constructor === Object\r\n}\r\n\r\n// Arrays as trees\r\nexport const arrayTreeLenses = {\r\n  getLabel: tree => {\r\n    return Array.isArray(tree) ? tree[0] : tree\r\n  },\r\n  getChildren: tree => {\r\n    return Array.isArray(tree)  ? tree[1] : []\r\n  },\r\n  constructTree: (label, children) => {\r\n    return children && Array.isArray(children) && children.length > 0 ? [label, children] : label\r\n  },\r\n}\r\n\r\n// Conversion\r\nexport function switchTreeDataStructure(originLenses, targetLenses, tree) {\r\n  const { getLabel, getChildren } = originLenses;\r\n  const { constructTree } = targetLenses;\r\n  const getChildrenNumber = (tree, traversalState) => getChildren(tree, traversalState).length;\r\n\r\n  const traverse = {\r\n    seed: () => Map,\r\n    visit: (pathMap, traversalState, tree) => {\r\n      const { path } = traversalState.get(tree);\r\n      const label = getLabel(tree);\r\n      const children = times(\r\n        index => pathMap.get(stringify(path.concat(index))),\r\n        getChildrenNumber(tree, traversalState)\r\n      );\r\n      pathMap.set(stringify(path), constructTree(label, children));\r\n\r\n      return pathMap;\r\n    }\r\n  };\r\n\r\n  const newTreeStruct = postOrderTraverseTree(originLenses, traverse, tree);\r\n  return newTreeStruct.get(stringify(PATH_ROOT));\r\n}\r\n"],"names":[],"mappings":"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"}